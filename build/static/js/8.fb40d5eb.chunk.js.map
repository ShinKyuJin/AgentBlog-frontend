{"version":3,"sources":["shared/utils.tsx","components/atoms/post/Hashtag.tsx","components/atoms/post/Markdown.tsx","components/atoms/theme/DetailText.tsx","models/post.tsx","components/pages/PostDetail/PostDetailQueries.tsx","components/pages/PostDetail/Comment/addCommentQueries.tsx","components/pages/PostDetail/PostDetailPresenter.tsx","components/pages/PostDetail/PostDetailContainer.tsx","components/pages/PostDetail/index.tsx"],"names":["convertMarkdownToText","str","marked","replace","match","dec","String","fromCharCode","uploadImage","file","a","formData","FormData","append","name","Axios","post","serverUri","headers","DateToYYYYMMDD","date","tokens","slice","split","HashtagContainer","styled","Link","React","memo","isLink","onClick","to","e","preventDefault","Image","props","alt","others","style","display","maxWidth","marginLeft","marginRight","InlineCodeBlock","background","padding","borderRadius","value","BlockQuoteBlock","backgroundColor","margin","flexWrap","borderLeft","children","CodeBlock","color","lineHeight","href","_props","LinkContainer","Conatiner","div","source","renderers","code","inlineCode","blockquote","image","link","skipHtml","escapeHtml","Text","span","DetailText","text","QUERY_WRITE_POST","gql","QUERY_POST_DETAIL","QUERY_EDIT_POST","MUTATION_LIKE_POST","ADD_COMMENT","Container","main","HeaderContainer","header","TitleContainer","InfoContainer","InfoSeparator","DateInfo","EditButton","theme","greyColor","deepDarkGreyColor","ToUserInfo","BodyContainer","article","TailContainer","TailAvatar","Avatar","TailLink","TailUserInfo","Contour","hr","CommentMakeContainer","CommentCount","CommentInput","textarea","CommentSubmit","Button","LikeSidebarContainer","LikeSidebar","aside","LikeContainer","LikeButton","LikedButton","LikeCount","p","CommentsContaniner","CommentBox","CommentUser","CommentProfile","CommentInfo","ConmentUserName","CommentDate","CommentContent","PostDetailPresenter","username","data","loading","comment","makeCommentDisable","handleChangeComment","handleMakeComment","handleClickLike","handleDeletePost","handleEditPost","myId","useSelector","state","me","id","PostDetail","useMemo","content","Helmet","getPostDetail","title","createdAt","user","hashtags","map","key","Hashtag","isLiked","Icon","type","likeCount","Markdown","url","avatar","size","bio","comments","Object","keys","length","commentCount","onChange","disabled","PostDetailContainer","dispatch","useDispatch","history","useHistory","isLoggedIn","useQuery","LOGIN_QUERY","useParams","posturl","variables","postData","refetch","useState","setMakeCommentDisable","setComment","useMutation","deletePostMutation","commentMutation","likeMutation","useCallback","posting_put","isEditing","t","series_id","series","thumbnail","push","window","confirm","item","action","location","target","toast","error","postId","addComment","success","scrollTo","document","body","scrollHeight","console","log","toggleLike"],"mappings":"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","file":"static/js/8.fb40d5eb.chunk.js","sourcesContent":["import marked from \"marked\";\nimport Axios from \"axios\";\nimport { serverUri } from \"../Apollo/Client\";\n\nexport const convertMarkdownToText = (str: string) => {\n  return marked(str)\n    .replace(/<[^>]+>/g, \"\")\n    .replace(/&#(\\d+);/g, function (match, dec) {\n      return String.fromCharCode(dec);\n    });\n};\n\nexport const uploadImage = async (file: File) => {\n  const formData = new FormData();\n  formData.append(\"file\", file, file.name);\n  return await Axios.post(serverUri + \"/api/upload\", formData, {\n    headers: {\n      \"content-type\": \"multipart/form-data\",\n    },\n  });\n};\n\nexport const DateToYYYYMMDD = (date: string) => {\n  const tokens = date.slice(0, 10).split(\"-\");\n  return `${tokens[0]}년 ${tokens[1]}월 ${tokens[2]}일`;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\ninterface HashtagPrpps {\n  name: string;\n  isLink?: boolean;\n  onClick?:\n    | ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void)\n    | undefined;\n}\nconst Hashtag: React.FC<HashtagPrpps> = ({ name, isLink = true, onClick }) => {\n  if (isLink) {\n    return <HashtagContainer to={`/tags/${name}`}>{name}</HashtagContainer>;\n  }\n  return (\n    <HashtagContainer\n      to={`/tags/${name}`}\n      onClick={(e) => {\n        e.preventDefault();\n        if (onClick) {\n          onClick(e);\n        }\n      }}\n    >\n      {name}\n    </HashtagContainer>\n  );\n};\n\nconst HashtagContainer = styled(Link)`\n  @media (max-width: 768px) {\n    height: 1.5rem;\n    font-size: 0.75rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    margin-right: 0.5rem;\n    margin-bottom: 0.5rem;\n    border-radius: 0.75rem;\n  }\n  display: inline-flex;\n  align-items: center;\n  height: 2rem;\n  padding: 0px 1rem;\n  margin-bottom: 0.875rem;\n  background-color: rgb(241, 243, 245);\n\n  color: rgb(12, 166, 120);\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 1rem;\n  border-radius: 1rem;\n\n  & + & {\n    margin-left: 10px;\n  }\n\n  transition: background-color 0.08s ease-out 0s;\n  &:hover {\n    background-color: rgb(249, 249, 250);\n  }\n`;\n\nexport default React.memo(Hashtag);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ReactMarkdown from \"react-markdown\";\n\ninterface MarkdownProps {\n  source: string;\n}\n\nconst Markdown: React.FC<MarkdownProps> = ({ source }) => {\n  return (\n    <Conatiner>\n      <ReactMarkdown\n        source={source.replace(/\\n/g, \"  \\n\")}\n        renderers={{\n          code: CodeBlock,\n          inlineCode: InlineCodeBlock,\n          blockquote: BlockQuoteBlock,\n          image: Image,\n          link: Link,\n        }}\n        skipHtml={false}\n        escapeHtml={false}\n      />\n    </Conatiner>\n  );\n};\n\nfunction Image(props: any) {\n  const { alt, ...others } = props;\n  return (\n    <img\n      alt={props.alt}\n      {...others}\n      style={{\n        display: \"flex\",\n        maxWidth: \"100%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n      }}\n    />\n  );\n}\n\nconst InlineCodeBlock = (props: any) => {\n  return (\n    <code\n      style={{\n        background: \"rgba(27, 31, 35, 0.05)\",\n        padding: \"0.2rem 0.4rem\",\n        borderRadius: \"3px\",\n      }}\n    >\n      {props.value}\n    </code>\n  );\n};\n\nconst BlockQuoteBlock = (props: any) => {\n  return (\n    <blockquote\n      style={{\n        backgroundColor: \"rgb(248,249,250)\",\n        padding: \"1rem 1rem 1rem 2rem\",\n        margin: 5,\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        borderLeft: \"4px solid rgb(32, 201, 151)\",\n      }}\n    >\n      {props.children}\n    </blockquote>\n  );\n};\n\nconst CodeBlock = (props: any) => {\n  return (\n    <pre\n      style={{\n        background: \"rgb(248,249,250)\",\n        color: \"#000\",\n        padding: 10,\n        lineHeight: 1.5,\n      }}\n    >\n      <code>{props.value}</code>\n    </pre>\n  );\n};\n\nconst Link = (props: any) => {\n  const { value, children, href, ..._props } = props;\n  return (\n    <>\n      <LinkContainer href={href} {..._props}>\n        {children}\n      </LinkContainer>\n    </>\n  );\n};\n\nconst LinkContainer = styled.a`\n  color: #0ca678;\n  &:hover {\n    color: #12b886;\n    text-decoration: underline;\n  }\n`;\n\nconst Conatiner = styled.div`\n  line-height: 1.7;\n  color: rgb(34, 36, 38);\n  & pre > code {\n    display: block;\n    overflow: scroll;\n  }\n`;\n\nexport default React.memo(Markdown);\n","import React, { HTMLAttributes } from \"react\";\nimport styled from \"styled-components\";\n\ninterface DetailTextProps extends HTMLAttributes<HTMLElement> {\n  text: string;\n  color?: string;\n}\n\nconst DetailText: React.FC<DetailTextProps> = ({ text, ...props }) => (\n  <Text {...props}>{text}</Text>\n);\n\nconst Text = styled.span`\n  font-size: 0.875rem;\n  color: rgb(134, 142, 150);\n`;\n\nexport default DetailText;\n","import { userInterface } from \"./user\";\nimport { gql } from \"apollo-boost\";\n\nexport interface postInterface {\n  id: string;\n  user: Pick<userInterface, \"id\" | \"username\" | \"avatar\" | \"bio\">;\n  title: string;\n  url: string;\n  description: string;\n  content: string;\n  hashtags: {\n    id: string;\n    name: string;\n  }[];\n  series: {\n    id: string;\n    title: string;\n    image: string;\n    createdAt: string;\n    updatedAt: string;\n  };\n  thumbnail: string;\n  likes: {\n    id: string;\n    user: {\n      id: string;\n      username: string;\n    };\n    createdAt: string;\n  };\n  comments: {\n    id: string;\n    text: string;\n    createdAt: string;\n    updatedAt: string;\n    user: Pick<userInterface, \"id\" | \"avatar\" | \"username\">;\n  }[];\n  isLiked: boolean;\n  likeCount: number;\n  createdAt: string;\n  updatedAt: string;\n  commentCount: number;\n}\n\nexport type HomePostProps = Pick<\n  postInterface,\n  | \"id\"\n  | \"user\"\n  | \"url\"\n  | \"title\"\n  | \"description\"\n  | \"content\"\n  | \"thumbnail\"\n  | \"likeCount\"\n  | \"createdAt\"\n  | \"commentCount\"\n>;\n\nexport type SearchPostProps = Pick<\n  postInterface,\n  | \"id\"\n  | \"user\"\n  | \"url\"\n  | \"title\"\n  | \"description\"\n  | \"content\"\n  | \"thumbnail\"\n  | \"hashtags\"\n  | \"createdAt\"\n  | \"commentCount\"\n>;\n\nexport type getPostDetail = Pick<\n  postInterface,\n  | \"id\"\n  | \"title\"\n  | \"user\"\n  | \"url\"\n  | \"content\"\n  | \"hashtags\"\n  | \"thumbnail\"\n  | \"createdAt\"\n  | \"series\"\n  | \"comments\"\n  | \"commentCount\"\n  | \"isLiked\"\n  | \"likeCount\"\n>;\n\nexport const QUERY_WRITE_POST = gql`\n  mutation posting(\n    $title: String!\n    $hashtags: [String!]\n    $content: String!\n    $series_id: String\n    $thumbnail: String\n    $url: String!\n  ) {\n    posting(\n      title: $title\n      hashtags: $hashtags\n      content: $content\n      series_id: $series_id\n      thumbnail: $thumbnail\n      url: $url\n    ) {\n      url\n      user {\n        username\n      }\n    }\n  }\n`;\n\nexport const QUERY_POST_DETAIL = gql`\n  query getPostDetail($username: String!, $url: String!) {\n    getPostDetail(username: $username, url: $url) {\n      id\n      title\n      url\n      user {\n        id\n        bio\n        avatar\n      }\n      files {\n        id\n        url\n      }\n      hashtags {\n        id\n        name\n      }\n      series {\n        id\n        title\n      }\n      thumbnail\n      createdAt\n      commentCount\n      content\n      comments {\n        id\n        text\n        user {\n          username\n          avatar\n        }\n        createdAt\n      }\n      isLiked\n      likeCount\n    }\n  }\n`;\n\nexport const QUERY_EDIT_POST = gql`\n  mutation editPost(\n    $id: String!\n    $title: String!\n    $url: String!\n    $hashtags: [String!]!\n    $thumbnail: String\n    $content: String!\n    $description: String\n    $series_id: String\n    $action: ACTIONS!\n  ) {\n    editPost(\n      id: $id\n      title: $title\n      url: $url\n      hashtags: $hashtags\n      thumbnail: $thumbnail\n      content: $content\n      description: $description\n      series_id: $series_id\n      action: $action\n    ) {\n      url\n    }\n  }\n`;\n","import { gql } from \"apollo-boost\";\nimport { getPostDetail } from \"../../../models/post\";\n\nexport interface getPostDetailData {\n  getPostDetail: getPostDetail;\n}\n\nexport interface getPostDetailVars {\n  username: string;\n  url: string;\n}\n\nexport const MUTATION_LIKE_POST = gql`\n  mutation toggleLike($postId: String!) {\n    toggleLike(postId: $postId)\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport interface addComment {\n  text: string;\n  postId: string;\n}\n\nexport interface addCommentVar {\n  addComment: addComment;\n}\n\nexport interface addCommentData {\n  user: {\n    avatar: string;\n    username: string;\n  }\n  text: string;\n}\n\nexport const ADD_COMMENT = gql`\nmutation addComment(\n  $text: String!,\n  $postId: String!\n) {\n  addComment(text: $text, postId: $postId) {\n    user {\n      avatar\n      username\n    }\n    text\n  }\n}\n`","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport Hashtag from \"../../atoms/post/Hashtag\";\nimport Markdown from \"../../atoms/post/Markdown\";\nimport Avatar from \"../../atoms/user/Avatar\";\nimport Button from \"../../atoms/theme/Button\";\nimport { getPostDetailData } from \"./PostDetailQueries\";\nimport { Icon } from \"../../atoms/theme/Icon\";\nimport { Helmet } from \"react-helmet\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../store/modules\";\nimport DetailText from \"../../atoms/theme/DetailText\";\nimport { DateToYYYYMMDD } from \"../../../shared/utils\";\n\ninterface PostDetailPresenterProps {\n  username: string;\n  data?: getPostDetailData;\n  loading: boolean;\n  comment: string;\n  makeCommentDisable: any;\n  handleChangeComment: any;\n  handleMakeComment: any;\n  handleClickLike: any;\n  handleDeletePost: any;\n  handleEditPost: any;\n}\n\nconst PostDetailPresenter: FC<PostDetailPresenterProps> = ({\n  username,\n  data,\n  loading,\n  comment,\n  makeCommentDisable,\n  handleChangeComment,\n  handleMakeComment,\n  handleClickLike,\n  handleDeletePost,\n  handleEditPost,\n}) => {\n  const myId = useSelector((state: RootState) => state.me.id);\n\n  const PostDetail = React.useMemo(\n    () => ({\n      content: (\n        <>\n          <Helmet>\n            <title>{data?.getPostDetail.title}</title>\n          </Helmet>\n          <HeaderContainer>\n            <TitleContainer>{data?.getPostDetail.title}</TitleContainer>\n            <InfoContainer>\n              <ToUserInfo to={`/@${username}`}>{username}</ToUserInfo>\n              <InfoSeparator>{\"·\"}</InfoSeparator>\n              <DateInfo>\n                {DateToYYYYMMDD(data?.getPostDetail.createdAt || \"\")}\n              </DateInfo>\n              {data?.getPostDetail.user.id === myId && (\n                <>\n                  <EditButton onClick={handleEditPost}>수정</EditButton>\n                  <EditButton onClick={handleDeletePost}>삭제</EditButton>\n                </>\n              )}\n            </InfoContainer>\n            <HashtagContainer>\n              {data?.getPostDetail.hashtags.map(({ name }, key) => (\n                <Hashtag key={key++} name={name} />\n              ))}\n            </HashtagContainer>\n            <LikeSidebarContainer>\n              <LikeSidebar>\n                <LikeContainer>\n                  {data?.getPostDetail.isLiked ? (\n                    <LikedButton onClick={handleClickLike}>\n                      <Icon type={\"redHeart\"} />\n                    </LikedButton>\n                  ) : (\n                    <LikeButton onClick={handleClickLike}>\n                      <Icon type={\"blackHeart\"} />\n                    </LikeButton>\n                  )}\n                  <LikeCount>{data?.getPostDetail.likeCount}</LikeCount>\n                </LikeContainer>\n              </LikeSidebar>\n            </LikeSidebarContainer>\n          </HeaderContainer>\n          <BodyContainer>\n            <Markdown source={data?.getPostDetail.content || \"\"} />\n          </BodyContainer>\n          <TailContainer>\n            <Link to={`/@${username}`}>\n              <TailAvatar\n                url={data?.getPostDetail.user.avatar || \"\"}\n                size=\"lg\"\n              />\n            </Link>\n            <TailUserInfo>\n              <TailLink to={`/@${username}`}>{username}</TailLink>\n              <DetailText text={data?.getPostDetail.user.bio || \"fd\"} />\n            </TailUserInfo>\n          </TailContainer>\n          <Contour />\n          <hr />\n        </>\n      ),\n      comments: (\n        <CommentsContaniner>\n          {data?.getPostDetail.comments.map((comment) => (\n            <CommentBox key={comment.id}>\n              <CommentUser>\n                <CommentProfile></CommentProfile>\n                <Avatar url={comment.user.avatar} size={\"md\"} />\n                <CommentInfo>\n                  <ConmentUserName>{comment.user.username}</ConmentUserName>\n                  <CommentDate>{comment.createdAt.slice(0, 10)}</CommentDate>\n                </CommentInfo>\n              </CommentUser>\n              <CommentContent>\n                <pre>{comment.text}</pre>\n              </CommentContent>\n            </CommentBox>\n          ))}\n        </CommentsContaniner>\n      ),\n    }),\n    [data, handleClickLike, handleEditPost, handleDeletePost, myId, username]\n  );\n\n  if (loading || (data && Object.keys(data).length === 0)) {\n    return <Container></Container>;\n  }\n\n  return (\n    <Container>\n      {PostDetail.content}\n      <CommentMakeContainer>\n        <CommentCount>{data?.getPostDetail.commentCount}개의 댓글</CommentCount>\n        <CommentInput onChange={handleChangeComment} value={comment} />\n        <CommentSubmit\n          text={\"댓글작성\"}\n          onClick={handleMakeComment}\n          disabled={makeCommentDisable}\n        />\n      </CommentMakeContainer>\n      {PostDetail.comments}\n    </Container>\n  );\n};\n\nconst Container = styled.main`\n  @media (max-width: 1024px) {\n    padding-left: 1rem;\n    padding-right: 1rem;\n    margin-top: 2rem;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  background-color: white;\n  margin-top: 5rem;\n`;\nconst HeaderContainer = styled.header`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: no-wrap;\n`;\nconst TitleContainer = styled.div`\n  @media (max-width: 1024px) {\n    font-size: 2.25rem;\n  }\n  font-weight: 700;\n  font-size: 3rem;\n  color: rgb(52, 58, 64);\n  line-height: 1.5;\n  margin-bottom: 2rem;\n`;\nconst InfoContainer = styled.div`\n  font-size: 18px;\n  display: flex;\n`; // username, createdAt\n\nconst InfoSeparator = styled.span`\n  margin: 0px 0.5rem;\n`;\n\nconst DateInfo = styled.span`\n  flex: 1 1 0%;\n  font-size: 1rem;\n  color: rgb(73, 80, 87);\n`;\n\nconst EditButton = styled.span`\n  cursor: pointer;\n  color: ${(props) => props.theme.greyColor};\n  &:hover {\n    color: ${(props) => props.theme.deepDarkGreyColor};\n  }\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst ToUserInfo = styled(Link)`\n  text-decoration: none;\n  font-weight: bold;\n  color: black;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\nconst HashtagContainer = styled.div`\n  margin-top: 10px;\n`;\n\nconst BodyContainer = styled.article``;\nconst TailContainer = styled.div`\n  margin-top: 10rem;\n  display: flex;\n  align-items: center;\n`;\nconst TailAvatar = styled(Avatar)``;\nconst TailLink = styled(Link)`\n  display: block;\n  text-decoration: none;\n  color: black;\n  font-weight: bold;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\nconst TailUserInfo = styled.div`\n  margin-left: 1rem;\n  font-size: 1.5rem;\n`;\n\nconst Contour = styled.hr`\n  margin-top: 25px;\n  width: 100%;\n  border: 1px solid rgb(241, 242, 243);\n`;\n\nconst CommentMakeContainer = styled.div`\n  margin: 5rem 0 2rem 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CommentCount = styled.div`\n  font-weight: 500;\n  font-size: 1.125rem;\n  margin-bottom: 15px;\n`;\n\nconst CommentInput = styled.textarea`\n  width: 100%;\n  height: 80px;\n  font-size: 16px;\n  font-weight: 400;\n  border: 1px solid rgb(210, 215, 220);\n  border-radius: 4px;\n`;\n\nconst CommentSubmit = styled(Button)`\n  padding: 5px 15px;\n  color: white;\n  font-weight: 600;\n  font-size: 16px;\n  width: 100px;\n  border: none;\n  margin-top: 10px;\n  align-self: flex-end;\n`;\n\nconst LikeSidebarContainer = styled.div`\n  position: relative;\n  margin-top: 2rem;\n`;\n\nconst LikeSidebar = styled.aside`\n  @media (max-width: 1024px) {\n    display: none;\n  }\n  position: absolute;\n  left: -7rem;\n`;\n\nconst LikeContainer = styled.div`\n  width: 4rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: rgb(248, 249, 250);\n  border: 1px solid rgb(241, 243, 245);\n  border-image: initial;\n  border-radius: 2rem;\n  padding: 0.5rem;\n`;\n\nconst LikeButton = styled.div`\n  width: 3rem;\n  height: 3rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: rgb(134, 142, 150);\n  cursor: pointer;\n  background-color: white;\n  border: 1px solid rgb(173, 181, 189);\n  border-radius: 1.5rem;\n\n  &:hover {\n    color: black;\n    border: 1px solid black;\n  }\n`;\n\nconst LikedButton = styled.div`\n  width: 3rem;\n  height: 3rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  cursor: pointer;\n  background-color: rgb(32, 201, 151);\n  border: 1px solid rgb(32, 201, 151);\n  border-radius: 1.5rem;\n`;\n\nconst LikeCount = styled.p`\n  font-weight: 500;\n`;\n\nconst CommentsContaniner = styled.div`\n  margin-top: 2.5rem;\n`;\nconst CommentBox = styled.div`\n  padding-top: 1.5rem;\n  padding-bottom: 1.5rem;\n`;\n\nconst CommentUser = styled.div`\n  margin-bottom: 1.5rem;\n  display: flex;\n  -webkit-box-pack: justify;\n  -webkit-box-align: center;\n  align-items: center;\n`;\n\nconst CommentProfile = styled.div`\n  display: flex;\n  -webkit-box-align: center;\n  align-items: center;\n`;\n\nconst CommentInfo = styled.div`\n  margin-left: 1rem;\n  line-height: 1;\n`;\n\nconst ConmentUserName = styled.div`\n  font-size: 1rem;\n  font-weight: bold;\n  color: rgb(52, 58, 64);\n`;\n\nconst CommentDate = styled.div`\n  margin-top: 0.5rem;\n  color: rgb(134, 142, 150);\n  font-size: 0.875rem;\n`;\n\nconst CommentContent = styled.div`\n  font-size: 1.125rem;\n  color: rgb(34, 36, 38);\n  line-height: 1.7;\n  letter-spacing: -0.004em;\n  word-break: keep-all;\n  overflow-wrap: break-word;\n`;\n\nexport default PostDetailPresenter;\n","import React, { useState, useCallback } from \"react\";\nimport { useQuery, useMutation } from \"react-apollo-hooks\";\nimport {\n  getPostDetailVars,\n  getPostDetailData,\n  MUTATION_LIKE_POST,\n} from \"./PostDetailQueries\";\nimport { toast } from \"react-toastify\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { ADD_COMMENT } from \"./Comment/addCommentQueries\";\nimport PostDetailPresenter from \"./PostDetailPresenter\";\nimport { QUERY_EDIT_POST, QUERY_POST_DETAIL } from \"../../../models/post\";\nimport { useDispatch } from \"react-redux\";\nimport { posting_put } from \"../../../store/modules/posting\";\nimport { LOGIN_QUERY } from \"../../../shared/App\";\n\ninterface PostDetailParams {\n  username: string;\n  posturl: string;\n}\n\nconst PostDetailContainer = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const isLoggedIn: boolean = useQuery(LOGIN_QUERY).data.isLoggedIn;\n  const { username, posturl } = useParams() as PostDetailParams;\n  const { data: postData, loading, refetch } = useQuery<\n    getPostDetailData,\n    getPostDetailVars\n  >(QUERY_POST_DETAIL, {\n    variables: {\n      username: username,\n      url: posturl,\n    },\n  });\n  const [makeCommentDisable, setMakeCommentDisable] = useState<boolean>(false);\n  const [comment, setComment] = useState<string>(\"\");\n\n  const [deletePostMutation] = useMutation(QUERY_EDIT_POST);\n  const [commentMutation] = useMutation(ADD_COMMENT);\n  const [likeMutation] = useMutation(MUTATION_LIKE_POST);\n\n  const handleEditPost = useCallback(() => {\n    const data = postData?.getPostDetail;\n    if (data) {\n      dispatch(\n        posting_put({\n          isEditing: true,\n          id: data.id,\n          content: data.content,\n          hashtags: data.hashtags.map((t) => t.name),\n          series_id: data.series?.id || \"\",\n          thumbnail: data.thumbnail,\n          title: data.title,\n          url: data.url,\n        })\n      );\n    }\n    history.push(\"/write\");\n  }, [dispatch, history, postData]);\n  const handleDeletePost = useCallback(async () => {\n    const isConfirmed = window.confirm(\"정말로 게시물을 삭제하시겠습니까?\");\n    if (!isConfirmed) return;\n\n    const data = postData?.getPostDetail;\n    await deletePostMutation({\n      variables: {\n        ...data,\n        hashtags: data?.hashtags.map((item) => item.name),\n        action: \"DELETE\",\n      },\n    });\n    window.location.href = \"/\";\n  }, [postData, deletePostMutation]);\n\n  const handleChangeComment = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setComment(e.target.value);\n    },\n    []\n  );\n\n  const handleMakeComment = useCallback(\n    async (e: any) => {\n      e.preventDefault();\n      if (!isLoggedIn) {\n        toast.error(\"로그인을 먼저 해주세요.\");\n        return;\n      }\n      setMakeCommentDisable(true);\n      if (comment !== \"\") {\n        try {\n          const { data }: any = await commentMutation({\n            variables: {\n              text: comment,\n              postId: postData?.getPostDetail.id,\n            },\n          });\n          await refetch();\n          if (!data.addComment) {\n            toast.error(\"댓글 작성에 실패했습니다.\");\n          } else {\n            toast.success(\"댓글 작성에 성공했습니다.\");\n          }\n          window.scrollTo(0, document.body.scrollHeight);\n        } catch (e) {\n          console.log(e);\n          toast.error(\"요청을 완료할 수 없습니다. 다시 시도해주세요.\");\n        }\n      }\n      setMakeCommentDisable(false);\n    },\n    [postData, comment, commentMutation, refetch, isLoggedIn]\n  );\n\n  const handleClickLike = useCallback(\n    async (e: any) => {\n      e.preventDefault();\n      if (!isLoggedIn) {\n        toast.error(\"로그인을 먼저 해주세요.\");\n        return;\n      }\n      try {\n        const {\n          data: { toggleLike },\n        }: any = await likeMutation({\n          variables: {\n            postId: postData?.getPostDetail.id,\n          },\n        });\n        await refetch();\n        if (!toggleLike) {\n          toast.error(\"잠시 후 다시 시도해주세요.\");\n        }\n      } catch (e) {\n        console.log(e);\n        toast.error(\"요청을 완료할 수 없습니다. 다시 시도해주세요.\");\n      }\n    },\n    [postData, likeMutation, refetch, isLoggedIn]\n  );\n  return (\n    <PostDetailPresenter\n      username={username}\n      data={postData}\n      loading={loading}\n      comment={comment}\n      makeCommentDisable={makeCommentDisable}\n      handleChangeComment={handleChangeComment}\n      handleMakeComment={handleMakeComment}\n      handleClickLike={handleClickLike}\n      handleDeletePost={handleDeletePost}\n      handleEditPost={handleEditPost}\n    />\n  );\n};\n\nexport default PostDetailContainer;\n","import PostDetailContainer from \"./PostDetailContainer\";\n\nexport default PostDetailContainer;\n"],"sourceRoot":""}