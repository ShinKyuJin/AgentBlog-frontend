{"version":3,"sources":["shared/utils.tsx","components/atoms/post/Hashtag.tsx","components/atoms/post/Markdown.tsx","models/post.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/modules/PostingToolbars.tsx","components/pages/WritePost/WritePostPresenter.tsx","components/pages/WritePost/WritePostContainer.tsx","components/pages/WritePost/index.tsx"],"names":["convertMarkdownToText","str","marked","replace","match","dec","String","fromCharCode","uploadImage","file","a","formData","FormData","append","name","Axios","post","serverUri","headers","DateToYYYYMMDD","date","tokens","slice","split","HashtagContainer","styled","Link","React","memo","isLink","onClick","to","e","preventDefault","Image","props","alt","others","style","display","maxWidth","marginLeft","marginRight","InlineCodeBlock","background","padding","borderRadius","value","BlockQuoteBlock","backgroundColor","margin","flexWrap","borderLeft","children","CodeBlock","color","lineHeight","href","_props","LinkContainer","Conatiner","div","source","renderers","code","inlineCode","blockquote","image","link","skipHtml","escapeHtml","QUERY_WRITE_POST","gql","QUERY_POST_DETAIL","QUERY_EDIT_POST","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","ToolbarContainer","ToolbarSep","ToolbarItem","button","ToolbarIcon","svg","PostingToolbars","onImageUpload","xmlns","d","document","getElementById","click","id","type","accept","onChange","hidden","Container","Wrapper","TitleEditor","input","HashtagEditor","HashtagBox","ContentEditor","textarea","ButtonsWrapper","ExitBtn","Button","ConfirmBtn","TitleContainer","h1","MarkContainer","FocusBar","WritePostPresenter","title","hashtag","hashtags","content","handleChangeText","handleChangeHashtags","handleSubmit","handleClickHashtag","hanldExit","onUpload","textareaEl","hanldToolbarButton","isEditing","showTagInfo","useCallback","toast","dark","position","hideProgressBar","autoClose","toastId","dismissInfo","dismiss","Hashtags","useMemo","map","text","Hashtag","key","onKeyPress","onFocus","onBlur","placeholder","tabIndex","Helmet","length","ref","icon","size","buttonType","colorStyle","Markdown","WritePostContainer","useState","setHashtag","useSelector","state","posting","series_id","thumbnail","url","myname","me","username","dispatch","useDispatch","history","useHistory","useRef","target","posting_set","find","warning","trim","error","useMutation","variables","postingMutation","action","editMutation","data","newUrl","success","editPost","posting_clear","push","console","log","filter","textContent","handleUploadImage","files","posting_addContent","location","fixes","h2","h3","h4","quote","codeBlock","bold","italic","del","currentTarget","start","current","selectionStart","includes","lastIndexOf","end","selectionEnd","afterContet","startsWith","endsWith","focus","setRangeText","goBack"],"mappings":"wRAIaA,EAAwB,SAACC,GACpC,OAAOC,IAAOD,GACXE,QAAQ,WAAY,IACpBA,QAAQ,aAAa,SAAUC,EAAOC,GACrC,OAAOC,OAAOC,aAAaF,OAIpBG,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACnBC,EAAW,IAAIC,UACZC,OAAO,OAAQJ,EAAMA,EAAKK,MAFV,SAGZC,IAAMC,KAAKC,IAAY,cAAeN,EAAU,CAC3DO,QAAS,CACP,eAAgB,yBALK,mFAAH,sDAUXC,EAAiB,SAACC,GAC7B,IAAMC,EAASD,EAAKE,MAAM,EAAG,IAAIC,MAAM,KACvC,MAAM,GAAN,OAAUF,EAAO,GAAjB,kBAAwBA,EAAO,GAA/B,kBAAsCA,EAAO,GAA7C,Y,oyBCbF,IAmBMG,EAAmBC,YAAOC,IAAPD,CAAH,KAiCPE,QAAMC,MApDmB,SAAC,GAAsC,IAApCd,EAAmC,EAAnCA,KAAmC,IAA7Be,cAA6B,SAAdC,EAAc,EAAdA,QAC9D,OAAID,EACK,kBAACL,EAAD,CAAkBO,GAAE,gBAAWjB,IAASA,GAG/C,kBAACU,EAAD,CACEO,GAAE,gBAAWjB,GACbgB,QAAS,SAACE,GACRA,EAAEC,iBACEH,GACFA,EAAQE,KAIXlB,O,ybCEP,SAASoB,EAAMC,GACcA,EAAnBC,IADkB,IACVC,EADS,YACEF,EADF,SAEzB,OACE,uCACEC,IAAKD,EAAMC,KACPC,EAFN,CAGEC,MAAO,CACLC,QAAS,OACTC,SAAU,OACVC,WAAY,OACZC,YAAa,WAMrB,IAAMC,EAAkB,SAACR,GACvB,OACE,0BACEG,MAAO,CACLM,WAAY,yBACZC,QAAS,gBACTC,aAAc,QAGfX,EAAMY,QAKPC,EAAkB,SAACb,GACvB,OACE,gCACEG,MAAO,CACLW,gBAAiB,mBACjBJ,QAAS,sBACTK,OAAQ,EACRX,QAAS,OACTY,SAAU,OACVC,WAAY,gCAGbjB,EAAMkB,WAKPC,EAAY,SAACnB,GACjB,OACE,yBACEG,MAAO,CACLM,WAAY,mBACZW,MAAO,OACPV,QAAS,GACTW,WAAY,MAGd,8BAAOrB,EAAMY,SAKbrB,EAAO,SAACS,GACiCA,EAArCY,MADoB,IACbM,EAA8BlB,EAA9BkB,SAAUI,EAAoBtB,EAApBsB,KAASC,EADP,YACkBvB,EADlB,6BAE3B,OACE,oCACE,kBAACwB,EAAD,eAAeF,KAAMA,GAAUC,GAC5BL,KAMHM,EAAgBlC,IAAOf,EAAV,KAQbkD,EAAYnC,IAAOoC,IAAV,KASAlC,QAAMC,MA7GqB,SAAC,GAAgB,IAAdkC,EAAa,EAAbA,OAC3C,OACE,kBAACF,EAAD,KACE,kBAAC,IAAD,CACEE,OAAQA,EAAO3D,QAAQ,MAAO,QAC9B4D,UAAW,CACTC,KAAMV,EACNW,WAAYtB,EACZuB,WAAYlB,EACZmB,MAAOjC,EACPkC,KAAM1C,GAER2C,UAAU,EACVC,YAAY,S,01DCoEb,IAAMC,EAAmBC,cAAH,KAyBhBC,EAAoBD,cAAH,KA0CjBE,EAAkBF,cAAH,M,yFCxJb,SAASG,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,G,0kCIF9F,IAoEMC,EAAmB9D,IAAOoC,IAAV,KAOhB2B,EAAa/D,IAAOoC,IAAV,KAQV4B,EAAchE,IAAOiE,OAAV,KAoBXC,EAAclE,IAAOmE,IAAV,KAQFC,EA/GyD,SAAC,GAGlE,IAFL/D,EAEI,EAFJA,QACAgE,EACI,EADJA,cAEA,OACE,kBAACP,EAAD,KACE,kBAACE,EAAD,CAAa3E,KAAM,KAAMgB,QAASA,GAAlC,IACG,mCAEH,kBAAC2D,EAAD,CAAa3E,KAAM,KAAMgB,QAASA,GAAlC,IACG,mCAEH,kBAAC2D,EAAD,CAAa3E,KAAM,KAAMgB,QAASA,GAAlC,IACG,mCAEH,kBAAC2D,EAAD,CAAa3E,KAAM,KAAMgB,QAASA,GAAlC,IACG,mCAEH,kBAAC0D,EAAD,MACA,kBAACC,EAAD,CAAa3E,KAAM,OAAQgB,QAASA,GAClC,kBAAC6D,EAAD,CAAaI,MAAM,8BACjB,0BAAMC,EAAE,4OAGZ,kBAACP,EAAD,CAAa3E,KAAM,SAAUgB,QAASA,GACpC,kBAAC6D,EAAD,CAAaI,MAAM,8BACjB,0BAAMC,EAAE,uDAGZ,kBAACP,EAAD,CAAa3E,KAAM,MAAOgB,QAASA,GACjC,kBAAC6D,EAAD,CAAaI,MAAM,8BACjB,0BAAMC,EAAE,6DAGZ,kBAACR,EAAD,MACA,kBAACC,EAAD,CAAa3E,KAAM,QAASgB,QAASA,GACnC,kBAAC6D,EAAD,CAAaI,MAAM,8BACjB,0BAAMC,EAAE,+CAGZ,kBAACP,EAAD,CAAa3E,KAAM,OAAQgB,QAASA,GAClC,kBAAC6D,EAAD,CAAaI,MAAM,8BACjB,0BAAMC,EAAE,0NAGZ,kBAACP,EAAD,CACE3E,KAAM,cACNgB,QAAS,kCAAMmE,SAASC,eAAe,iBAA9B,aAAM,EAAmCC,UAElD,2BACEC,GAAI,SACJC,KAAM,OACNC,OAAQ,UACRC,SAAUT,EACVU,QAAM,IAER,kBAACb,EAAD,CAAaI,MAAM,8BACjB,0BAAMC,EAAE,+HAGZ,kBAACP,EAAD,CAAa3E,KAAM,YAAagB,QAASA,GACvC,kBAAC6D,EAAD,CAAaI,MAAM,8BACjB,0BAAMC,EAAE,mG,s6ECtClB,IAyIMS,EAAYhF,IAAOoC,IAAV,KAMT6C,EAAUjF,IAAOoC,IAAV,KAaP8C,EAAclF,IAAOmF,MAAV,KAYXC,EAAgBpF,IAAOmF,MAAV,KAoBbE,EAAarF,IAAOoC,IAAV,KAOVkD,EAAgBtF,IAAOuF,SAAV,KAcbC,EAAiBxF,IAAOoC,IAAV,KASdqD,EAAUzF,YAAO0F,IAAP1F,CAAH,KAOP2F,EAAa3F,YAAO0F,IAAP1F,CAAH,KAOV4F,EAAiB5F,IAAO6F,GAAV,KAKdC,EAAgB9F,IAAOoC,IAAV,KAWb2D,EAAW/F,IAAOoC,IAAV,KAOC4D,EA/PyC,SAAC,GAclD,IAbLC,EAaI,EAbJA,MACAC,EAYI,EAZJA,QACAC,EAWI,EAXJA,SACAC,EAUI,EAVJA,QACAC,EASI,EATJA,iBACAC,EAQI,EARJA,qBACAC,EAOI,EAPJA,aACAC,EAMI,EANJA,mBACAC,EAKI,EALJA,UACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,UAEMC,EAAc5G,IAAM6G,aACxB,kBACEC,IAAMC,KACJ,+OACA,CACEC,SAAU,aACVC,iBAAiB,EACjBC,WAAW,EACXC,QAAS,cAGf,IAEIC,EAAcpH,IAAM6G,aAAY,kBAAMC,IAAMO,QAAQ,aAAY,IAEhEC,EAAWtH,IAAMuH,SACrB,kBACE,kBAACpC,EAAD,KACGc,EAASuB,KAAI,SAACC,GAAD,OACZ,kBAACC,EAAA,EAAD,CACEC,IAAKF,EACLtI,KAAMsI,EACNvH,QAAQ,EACRC,QAASmG,OAGb,kBAACpB,EAAD,CACE9D,MAAO4E,EACPpB,SAAUuB,EACVyB,WAAYxB,EACZyB,QAASjB,EACTkB,OAAQV,EACRW,YAAY,0DACZ5I,KAAK,UACL6I,SAAU,OAIhB,CACE/B,EACAD,EACAM,EACAc,EACAR,EACAR,EACAD,IAIJ,OACE,kBAACrB,EAAD,KACE,kBAACmD,EAAA,EAAD,KACGlC,EAAMmC,OAAS,EACd,uDAAcnC,GAEd,uDAGJ,kBAAChB,EAAD,KACG/E,IAAMuH,SACL,kBACE,kBAACvC,EAAD,CACE5D,MAAO2E,EACPnB,SAAUuB,EACV4B,YAAY,0DACZ5I,KAAK,QACL6I,SAAU,MAGd,CAACjC,EAAOI,IAEV,kBAACN,EAAD,MACCyB,EACD,kBAAC,EAAD,CACEnH,QAASuG,EACTvC,cAAeqC,IAEhBxG,IAAMuH,SACL,kBACE,kBAACnC,EAAD,CACEhE,MAAO8E,EACPtB,SAAUuB,EACVgC,IAAK1B,EACLsB,YAAY,0DACZ5I,KAAK,UACL6I,SAAU,MAGd,CAAC9B,EAASC,EAAkBM,IAE9B,kBAACnB,EAAD,KACE,kBAACC,EAAD,CACEkC,KAAM,qBACNW,KAAM,CAAE1D,KAAM,OAAQ2D,KAAM,IAC5BC,WAAY,OACZC,WAAY,YACZpI,QAASoG,IAEVvG,IAAMuH,SACL,kBACE,kBAAC9B,EAAD,CACEgC,KAAMd,EAAY,2BAAS,2BAC3BxG,QAASkG,MAGb,CAACA,EAAcM,MAIpB3G,IAAMuH,SACL,kBACE,kBAAC3B,EAAD,KACE,kBAACF,EAAD,KAAiBK,GACjB,kBAACyC,EAAA,EAAD,CAAUrG,OAAM,UAAK+D,QAGzB,CAACH,EAAOG,M,uDC0EDuC,GAzNY,WAAO,IAAD,EACDC,mBAAiB,IADhB,mBACxB1C,EADwB,KACf2C,EADe,KAEzBlE,EAAKmE,cAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQrE,MACrDkC,EAAYiC,cAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQnC,aAC5DZ,EAAQ6C,cAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQ/C,SACxDE,EAAW2C,cAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQ7C,YAC3DC,EAAU0C,cAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQ5C,WAC1D6C,EAAYH,cAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQC,aAC5DC,EAAYJ,cAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQE,aAC5DC,EAAML,cAAY,SAACC,GAAD,OAAsBA,EAAMC,QAAQG,OACtDC,EAASN,cAAY,SAACC,GAAD,OAAsBA,EAAMM,GAAGC,YACpDC,EAAWC,eACXC,EAAUC,eAEV/C,EAAagD,iBAA4B,MAEzCtD,EAAmBU,uBACvB,SAACxG,GAA4C,IAAD,EAClBA,EAAEqJ,OAAlBvK,EADkC,EAClCA,KAAMiC,EAD4B,EAC5BA,MACD,YAATjC,GAAoBwJ,EAAWvH,GACtB,UAATjC,GAA6B,YAATA,GACtBkK,EAASM,aAAY,CAAEhC,IAAKxI,EAAMiC,aAEtC,CAACiI,IAGGjD,EAAuBS,uBAC3B,SAACxG,GACC,GAAc,UAAVA,EAAEsH,KAA6B,MAAVtH,EAAEsH,IAAa,CAEtC,GADAtH,EAAEC,iBACE2F,EAAS2D,MAAK,SAACnC,GAAD,OAAUA,IAASzB,KACnC,OAAOc,IAAM+C,QAAQ,yEAEA,KAAnB7D,EAAQ8D,QACVnB,EAAW,IACXU,EACEM,aAAY,CAAEhC,IAAK,WAAYvG,MAAM,GAAD,SAAM6E,GAAN,CAAgBD,QAGtDc,IAAMiD,MAAM,2EAIlB,CAAC/D,EAASC,EAAUoD,IA3CS,EA8CLW,uBAAYpH,IAAkB,CACtDqH,UAAW,CACTlE,QACAE,WACAC,UACA6C,YACAC,YACAC,IAAKlD,KAPFmE,EA9CwB,sBAyDRF,uBAAYjH,IAAiB,CAClDkH,UAAW,CACTxF,KACAsB,QACAE,WACAC,UACA6C,YACAC,YACAC,MACAkB,OAAQ,UATLC,EAzDwB,oBAsEzB/D,EAAeQ,sBAAW,uCAC9B,WAAOxG,GAAP,uBAAAtB,EAAA,yDACEsB,EAAEC,iBACY,KAAVyF,GAA4B,KAAZG,EAFtB,gBAGIY,IAAMiD,MAAM,4FAHhB,mCAQWpD,EARX,iCASoCuD,IATpC,gBASgBG,EAThB,EASgBA,KACRC,EAASD,EAAKvB,QAAQG,IACjBoB,EAAKvB,QAGRhC,IAAMyD,QAAQ,mEAFdzD,IAAMiD,MAAM,mEAZtB,yCAiBoCK,IAjBpC,iBAiBgBC,EAjBhB,EAiBgBA,KACRC,EAASD,EAAKG,SAASvB,IAClBoB,EAAKG,UAGR1D,IAAMyD,QAAQ,+EACdlB,EAASoB,iBAHT3D,IAAMiD,MAAM,+EApBtB,QA0BMR,EAAQmB,KAAR,YAAkBxB,EAAlB,YAA4BoB,IA1BlC,kDA4BMK,QAAQC,IAAR,MACA9D,IAAMiD,MAAM,6HA7BlB,0DAD8B,sDAkC9B,CACEpD,EACAZ,EACAG,EACAgD,EACAgB,EACAE,EACAf,EACAE,IAIEjD,EAAqBO,uBACzB,SAACxG,GAAD,OACEgJ,EACEM,aAAY,CACVhC,IAAK,WACLvG,MAAO6E,EAAS4E,QAAO,SAACpD,GAAD,OAAUA,IAASpH,EAAEqJ,OAAOoB,oBAGzD,CAAC7E,EAAUoD,IAGP0B,EAAoBlE,sBAAW,uCACnC,WAAOxG,GAAP,mBAAAtB,EAAA,yDACOsB,EAAEqJ,OAAOsB,OAAmC,IAA1B3K,EAAEqJ,OAAOsB,MAAM9C,OADxC,wDAEQpJ,EAAOuB,EAAEqJ,OAAOsB,MAAM,GAF9B,kBAI2BnM,aAAYC,GAJvC,gBAIYuL,EAJZ,EAIYA,KACRhB,EAAS4B,aAAmB,SAAD,OAAUZ,EAAKa,SAAf,OAL/B,yDAOIpE,IAAMiD,MAAM,0FAPhB,kBAQW,MARX,0DADmC,sDAYnC,CAACV,IAGG3C,EAAqBG,uBACzB,SAACxG,GAAwD,IAAD,YAea,EAd7D8K,EAAa,CACjBxF,GAAI,CAAC,KAAM,IACXyF,GAAI,CAAC,MAAO,IACZC,GAAI,CAAC,OAAQ,IACbC,GAAI,CAAC,QAAS,IACdC,MAAO,CAAC,KAAM,IACdC,UAAW,CAAC,QAAS,WACrBC,KAAM,CAAC,KAAM,MACbC,OAAQ,CAAC,IAAK,MACdC,IAAK,CAAC,KAAM,MACZlJ,KAAM,CAAC,IAAK,iBAERtD,EAAOkB,EAAEuL,cAAczM,KACzB0M,GAAQ,UAAApF,EAAWqF,eAAX,eAAoBC,iBAAkB,EAC9C,CAAC,KAAM,KAAM,KAAM,KAAM,QAAS,aAAaC,SAAS7M,KAG1D0M,IADE,UAAApF,EAAWqF,eAAX,eAAoB1K,MAAM6K,YAAY,KAAMJ,EAAQ,KAAM,GAC5C,GAElB,IAAMK,GAAM,UAAAzF,EAAWqF,eAAX,eAAoBK,eAAgB,EAC1CjG,GAAU,UAAAO,EAAWqF,eAAX,eAAoB1K,MAAMzB,MAAMkM,EAAOK,KAAQ,qBAE3DE,EAAc,GAEhBlG,EAAQmG,WAAWlB,EAAMhM,GAAM,KAC/B+G,EAAQoG,SAASnB,EAAMhM,GAAM,IAEN,KAAnBgM,EAAMhM,GAAM,GACdiN,GAAelG,EAAQvG,MAAMwL,EAAMhM,GAAM,GAAG+I,QAE5CkE,GAAelG,EAAQvG,MACrBwL,EAAMhM,GAAM,GAAG+I,QACdiD,EAAMhM,GAAM,GAAG+I,QAIpBkE,GAAejB,EAAMhM,GAAM,GAAK+G,EAAUiF,EAAMhM,GAAM,GAExD,UAAAsH,EAAWqF,eAAX,SAAoBS,QACpB,UAAA9F,EAAWqF,eAAX,SAAoBU,aAAaJ,EAAaP,EAAOK,EAAK,UAC1D7C,EACEM,aAAY,CAAEhC,IAAK,UAAWvG,MAAK,UAAEqF,EAAWqF,eAAb,aAAE,EAAoB1K,WAG7D,CAACiI,IAUH,OACE,kBAAC,EAAD,CACEtD,MAAOA,EACPC,QAASA,EACTC,SAAUA,EACVC,QAASA,EACTC,iBAAkBA,EAClBC,qBAAsBA,EACtBC,aAAcA,EACdC,mBAAoBA,EACpBC,UAjBc,WACZI,GACF0C,EAASoB,gBAEXlB,EAAQkD,UAcNjG,SAAUuE,EACVtE,WAAYA,EACZC,mBAAoBA,EACpBC,UAAWA,KCjOF8B","file":"static/js/10.9c900a24.chunk.js","sourcesContent":["import marked from \"marked\";\nimport Axios from \"axios\";\nimport { serverUri } from \"../Apollo/Client\";\n\nexport const convertMarkdownToText = (str: string) => {\n  return marked(str)\n    .replace(/<[^>]+>/g, \"\")\n    .replace(/&#(\\d+);/g, function (match, dec) {\n      return String.fromCharCode(dec);\n    });\n};\n\nexport const uploadImage = async (file: File) => {\n  const formData = new FormData();\n  formData.append(\"file\", file, file.name);\n  return await Axios.post(serverUri + \"/api/upload\", formData, {\n    headers: {\n      \"content-type\": \"multipart/form-data\",\n    },\n  });\n};\n\nexport const DateToYYYYMMDD = (date: string) => {\n  const tokens = date.slice(0, 10).split(\"-\");\n  return `${tokens[0]}년 ${tokens[1]}월 ${tokens[2]}일`;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\ninterface HashtagPrpps {\n  name: string;\n  isLink?: boolean;\n  onClick?:\n    | ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void)\n    | undefined;\n}\nconst Hashtag: React.FC<HashtagPrpps> = ({ name, isLink = true, onClick }) => {\n  if (isLink) {\n    return <HashtagContainer to={`/tags/${name}`}>{name}</HashtagContainer>;\n  }\n  return (\n    <HashtagContainer\n      to={`/tags/${name}`}\n      onClick={(e) => {\n        e.preventDefault();\n        if (onClick) {\n          onClick(e);\n        }\n      }}\n    >\n      {name}\n    </HashtagContainer>\n  );\n};\n\nconst HashtagContainer = styled(Link)`\n  @media (max-width: 768px) {\n    height: 1.5rem;\n    font-size: 0.75rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    margin-right: 0.5rem;\n    margin-bottom: 0.5rem;\n    border-radius: 0.75rem;\n  }\n  display: inline-flex;\n  align-items: center;\n  height: 2rem;\n  padding: 0px 1rem;\n  margin-bottom: 0.875rem;\n  background-color: rgb(241, 243, 245);\n\n  color: rgb(12, 166, 120);\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 1rem;\n  border-radius: 1rem;\n\n  & + & {\n    margin-left: 10px;\n  }\n\n  transition: background-color 0.08s ease-out 0s;\n  &:hover {\n    background-color: rgb(249, 249, 250);\n  }\n`;\n\nexport default React.memo(Hashtag);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ReactMarkdown from \"react-markdown\";\n\ninterface MarkdownProps {\n  source: string;\n}\n\nconst Markdown: React.FC<MarkdownProps> = ({ source }) => {\n  return (\n    <Conatiner>\n      <ReactMarkdown\n        source={source.replace(/\\n/g, \"  \\n\")}\n        renderers={{\n          code: CodeBlock,\n          inlineCode: InlineCodeBlock,\n          blockquote: BlockQuoteBlock,\n          image: Image,\n          link: Link,\n        }}\n        skipHtml={false}\n        escapeHtml={false}\n      />\n    </Conatiner>\n  );\n};\n\nfunction Image(props: any) {\n  const { alt, ...others } = props;\n  return (\n    <img\n      alt={props.alt}\n      {...others}\n      style={{\n        display: \"flex\",\n        maxWidth: \"100%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n      }}\n    />\n  );\n}\n\nconst InlineCodeBlock = (props: any) => {\n  return (\n    <code\n      style={{\n        background: \"rgba(27, 31, 35, 0.05)\",\n        padding: \"0.2rem 0.4rem\",\n        borderRadius: \"3px\",\n      }}\n    >\n      {props.value}\n    </code>\n  );\n};\n\nconst BlockQuoteBlock = (props: any) => {\n  return (\n    <blockquote\n      style={{\n        backgroundColor: \"rgb(248,249,250)\",\n        padding: \"1rem 1rem 1rem 2rem\",\n        margin: 5,\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        borderLeft: \"4px solid rgb(32, 201, 151)\",\n      }}\n    >\n      {props.children}\n    </blockquote>\n  );\n};\n\nconst CodeBlock = (props: any) => {\n  return (\n    <pre\n      style={{\n        background: \"rgb(248,249,250)\",\n        color: \"#000\",\n        padding: 10,\n        lineHeight: 1.5,\n      }}\n    >\n      <code>{props.value}</code>\n    </pre>\n  );\n};\n\nconst Link = (props: any) => {\n  const { value, children, href, ..._props } = props;\n  return (\n    <>\n      <LinkContainer href={href} {..._props}>\n        {children}\n      </LinkContainer>\n    </>\n  );\n};\n\nconst LinkContainer = styled.a`\n  color: #0ca678;\n  &:hover {\n    color: #12b886;\n    text-decoration: underline;\n  }\n`;\n\nconst Conatiner = styled.div`\n  line-height: 1.7;\n  color: rgb(34, 36, 38);\n  & pre > code {\n    display: block;\n    overflow: scroll;\n  }\n`;\n\nexport default React.memo(Markdown);\n","import { userInterface } from \"./user\";\nimport { gql } from \"@apollo/client\";\n\nexport interface postInterface {\n  id: string;\n  user: Pick<userInterface, \"id\" | \"username\" | \"avatar\" | \"bio\">;\n  title: string;\n  url: string;\n  description: string;\n  content: string;\n  hashtags: {\n    id: string;\n    name: string;\n  }[];\n  series: {\n    id: string;\n    title: string;\n    image: string;\n    createdAt: string;\n    updatedAt: string;\n  };\n  thumbnail: string;\n  likes: {\n    id: string;\n    user: {\n      id: string;\n      username: string;\n    };\n    createdAt: string;\n  };\n  comments: {\n    id: string;\n    text: string;\n    createdAt: string;\n    updatedAt: string;\n    user: Pick<userInterface, \"id\" | \"avatar\" | \"username\">;\n  }[];\n  isLiked: boolean;\n  likeCount: number;\n  createdAt: string;\n  updatedAt: string;\n  commentCount: number;\n}\n\nexport type HomePostProps = Pick<\n  postInterface,\n  | \"id\"\n  | \"user\"\n  | \"url\"\n  | \"title\"\n  | \"description\"\n  | \"content\"\n  | \"thumbnail\"\n  | \"likeCount\"\n  | \"createdAt\"\n  | \"commentCount\"\n>;\n\nexport type SearchPostProps = Pick<\n  postInterface,\n  | \"id\"\n  | \"user\"\n  | \"url\"\n  | \"title\"\n  | \"description\"\n  | \"content\"\n  | \"thumbnail\"\n  | \"hashtags\"\n  | \"createdAt\"\n  | \"commentCount\"\n>;\n\nexport type getPostDetail = Pick<\n  postInterface,\n  | \"id\"\n  | \"title\"\n  | \"user\"\n  | \"url\"\n  | \"content\"\n  | \"hashtags\"\n  | \"thumbnail\"\n  | \"createdAt\"\n  | \"series\"\n  | \"comments\"\n  | \"commentCount\"\n  | \"isLiked\"\n  | \"likeCount\"\n>;\n\nexport const QUERY_WRITE_POST = gql`\n  mutation posting(\n    $title: String!\n    $hashtags: [String!]\n    $content: String!\n    $series_id: String\n    $thumbnail: String\n    $url: String!\n  ) {\n    posting(\n      title: $title\n      hashtags: $hashtags\n      content: $content\n      series_id: $series_id\n      thumbnail: $thumbnail\n      url: $url\n    ) {\n      url\n      user {\n        username\n      }\n    }\n  }\n`;\n\nexport const QUERY_POST_DETAIL = gql`\n  query getPostDetail($username: String!, $url: String!) {\n    getPostDetail(username: $username, url: $url) {\n      id\n      title\n      url\n      user {\n        id\n        bio\n        avatar\n      }\n      files {\n        id\n        url\n      }\n      hashtags {\n        id\n        name\n      }\n      series {\n        id\n        title\n      }\n      thumbnail\n      createdAt\n      commentCount\n      content\n      comments {\n        id\n        text\n        user {\n          username\n          avatar\n        }\n        createdAt\n      }\n      isLiked\n      likeCount\n    }\n  }\n`;\n\nexport const QUERY_EDIT_POST = gql`\n  mutation editPost(\n    $id: String!\n    $title: String!\n    $url: String!\n    $hashtags: [String!]!\n    $thumbnail: String\n    $content: String!\n    $description: String\n    $series_id: String\n    $action: ACTIONS!\n  ) {\n    editPost(\n      id: $id\n      title: $title\n      url: $url\n      hashtags: $hashtags\n      thumbnail: $thumbnail\n      content: $content\n      description: $description\n      series_id: $series_id\n      action: $action\n    ) {\n      url\n    }\n  }\n`;\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst PostingToolbars: React.FC<{ onClick: any; onImageUpload: any }> = ({\n  onClick,\n  onImageUpload,\n}) => {\n  return (\n    <ToolbarContainer>\n      <ToolbarItem name={\"h1\"} onClick={onClick}>\n        H<sub>1</sub>\n      </ToolbarItem>\n      <ToolbarItem name={\"h2\"} onClick={onClick}>\n        H<sub>2</sub>\n      </ToolbarItem>\n      <ToolbarItem name={\"h3\"} onClick={onClick}>\n        H<sub>3</sub>\n      </ToolbarItem>\n      <ToolbarItem name={\"h4\"} onClick={onClick}>\n        H<sub>4</sub>\n      </ToolbarItem>\n      <ToolbarSep />\n      <ToolbarItem name={\"bold\"} onClick={onClick}>\n        <ToolbarIcon xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z\" />\n        </ToolbarIcon>\n      </ToolbarItem>\n      <ToolbarItem name={\"italic\"} onClick={onClick}>\n        <ToolbarIcon xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z\" />\n        </ToolbarIcon>\n      </ToolbarItem>\n      <ToolbarItem name={\"del\"} onClick={onClick}>\n        <ToolbarIcon xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M10 19h4v-3h-4v3zM5 4v3h5v3h4V7h5V4H5zM3 14h18v-2H3v2z\" />\n        </ToolbarIcon>\n      </ToolbarItem>\n      <ToolbarSep />\n      <ToolbarItem name={\"quote\"} onClick={onClick}>\n        <ToolbarIcon xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M6 17h3l2-4V7H5v6h3zm8 0h3l2-4V7h-6v6h3z\" />\n        </ToolbarIcon>\n      </ToolbarItem>\n      <ToolbarItem name={\"link\"} onClick={onClick}>\n        <ToolbarIcon xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z\" />\n        </ToolbarIcon>\n      </ToolbarItem>\n      <ToolbarItem\n        name={\"uploadImage\"}\n        onClick={() => document.getElementById(\"fileid\")?.click()}\n      >\n        <input\n          id={\"fileid\"}\n          type={\"file\"}\n          accept={\"image/*\"}\n          onChange={onImageUpload}\n          hidden\n        />\n        <ToolbarIcon xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\" />\n        </ToolbarIcon>\n      </ToolbarItem>\n      <ToolbarItem name={\"codeBlock\"} onClick={onClick}>\n        <ToolbarIcon xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\" />\n        </ToolbarIcon>\n      </ToolbarItem>\n    </ToolbarContainer>\n  );\n};\nconst ToolbarContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  margin-bottom: 1rem;\n`;\n\nconst ToolbarSep = styled.div`\n  width: 1px;\n  height: 1.25rem;\n  margin-left: 0.5rem;\n  margin-right: 0.5rem;\n  background: rgb(206, 212, 218);\n`;\n\nconst ToolbarItem = styled.button`\n  display: flex;\n  width: 3rem;\n  height: 3rem;\n  font: 400 13.3333px Arial;\n  font-size: 1rem;\n  font-weight: bold;\n  align-items: center;\n  justify-content: center;\n  border: 0px;\n  background-color: white;\n  color: rgb(134, 142, 150) !important;\n  &:hover {\n    color: rgb(33, 37, 41) !important;\n    background: rgb(248, 249, 250) !important;\n  }\n  transition: all 0.05s ease-in 0s;\n  cursor: pointer;\n`;\n\nconst ToolbarIcon = styled.svg`\n  stroke: currentColor;\n  fill: currentColor;\n  stroke-width: 0;\n  height: 24px;\n  width: 24px;\n`;\n\nexport default PostingToolbars;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { Helmet } from \"react-helmet\";\nimport Hashtag from \"../../atoms/post/Hashtag\";\nimport Button from \"../../atoms/theme/Button\";\nimport Markdown from \"../../atoms/post/Markdown\";\nimport { toast } from \"react-toastify\";\nimport PostingToolbars from \"../../modules/PostingToolbars\";\n\ninterface WritePostPresenterProps {\n  title: string;\n  hashtag: string;\n  hashtags: Array<string>;\n  content: string;\n  handleChangeText: any;\n  handleChangeHashtags: (\n    e: React.KeyboardEvent<Element>\n  ) => string | number | undefined;\n  handleSubmit: (e: React.FormEvent<Element>) => Promise<void>;\n  handleClickHashtag: (e: any) => void;\n  hanldExit: any;\n  onUpload: any;\n  textareaEl: React.RefObject<HTMLTextAreaElement>;\n  hanldToolbarButton: any;\n  isEditing: boolean;\n}\n\nconst WritePostPresenter: FC<WritePostPresenterProps> = ({\n  title,\n  hashtag,\n  hashtags,\n  content,\n  handleChangeText,\n  handleChangeHashtags,\n  handleSubmit,\n  handleClickHashtag,\n  hanldExit,\n  onUpload,\n  textareaEl,\n  hanldToolbarButton,\n  isEditing,\n}) => {\n  const showTagInfo = React.useCallback(\n    () =>\n      toast.dark(\n        \"쉼표 혹은 엔터를 눌러 해시태그를 등록할 수 있습니다.\\n등록된 태그는 클릭하면 삭제됩니다.\",\n        {\n          position: \"top-center\",\n          hideProgressBar: true,\n          autoClose: false,\n          toastId: \"tagInfo\",\n        }\n      ),\n    []\n  );\n  const dismissInfo = React.useCallback(() => toast.dismiss(\"tagInfo\"), []);\n\n  const Hashtags = React.useMemo(\n    () => (\n      <HashtagBox>\n        {hashtags.map((text) => (\n          <Hashtag\n            key={text}\n            name={text}\n            isLink={false}\n            onClick={handleClickHashtag}\n          />\n        ))}\n        <HashtagEditor\n          value={hashtag}\n          onChange={handleChangeText}\n          onKeyPress={handleChangeHashtags}\n          onFocus={showTagInfo}\n          onBlur={dismissInfo}\n          placeholder=\"태그를 입력해주세요\"\n          name=\"hashtag\"\n          tabIndex={1}\n        />\n      </HashtagBox>\n    ),\n    [\n      hashtags,\n      hashtag,\n      handleClickHashtag,\n      dismissInfo,\n      showTagInfo,\n      handleChangeHashtags,\n      handleChangeText,\n    ]\n  );\n\n  return (\n    <Container>\n      <Helmet>\n        {title.length > 0 ? (\n          <title>(작성중) {title}</title>\n        ) : (\n          <title>글 작성</title>\n        )}\n      </Helmet>\n      <Wrapper>\n        {React.useMemo(\n          () => (\n            <TitleEditor\n              value={title}\n              onChange={handleChangeText}\n              placeholder=\"제목을 입력해주세요\"\n              name=\"title\"\n              tabIndex={0}\n            />\n          ),\n          [title, handleChangeText]\n        )}\n        <FocusBar />\n        {Hashtags}\n        <PostingToolbars\n          onClick={hanldToolbarButton}\n          onImageUpload={onUpload}\n        />\n        {React.useMemo(\n          () => (\n            <ContentEditor\n              value={content}\n              onChange={handleChangeText}\n              ref={textareaEl}\n              placeholder=\"내용을 입력해주세요\"\n              name=\"content\"\n              tabIndex={2}\n            />\n          ),\n          [content, handleChangeText, textareaEl]\n        )}\n        <ButtonsWrapper>\n          <ExitBtn\n            text={\"나가기\"}\n            icon={{ type: \"back\", size: 16 }}\n            buttonType={\"text\"}\n            colorStyle={\"lightGrey\"}\n            onClick={hanldExit}\n          />\n          {React.useMemo(\n            () => (\n              <ConfirmBtn\n                text={isEditing ? \"수정하기\" : \"출간하기\"}\n                onClick={handleSubmit}\n              />\n            ),\n            [handleSubmit, isEditing]\n          )}\n        </ButtonsWrapper>\n      </Wrapper>\n      {React.useMemo(\n        () => (\n          <MarkContainer>\n            <TitleContainer>{title}</TitleContainer>\n            <Markdown source={`${content}`} />\n          </MarkContainer>\n        ),\n        [title, content]\n      )}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: calc(100% - 0px);\n  flex-wrap: no-wrap;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n  height: 100%;\n  padding: 2rem 3rem;\n  background-color: white;\n\n  @media (max-width: 1024px) {\n    width: 100%;\n  }\n`;\n\nconst TitleEditor = styled.input`\n  width: 100%;\n  height: 70px;\n  font-size: 40px;\n  padding: 0;\n  border: none;\n  font-weight: 650;\n\n  &:focus {\n    outline: none;\n  }\n`;\nconst HashtagEditor = styled.input`\n  min-width: 12rem;\n  padding: 0;\n  margin-left: 1rem;\n  margin-bottom: 10px;\n  height: 40px;\n  font-size: 18px;\n  font-weight: 500;\n  padding: 0;\n  border: none;\n\n  &:first-child {\n    margin-left: 0rem;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst HashtagBox = styled.div`\n  margin: 10px 0;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n`;\n\nconst ContentEditor = styled.textarea`\n  width: 100%;\n  margin-top: 15px;\n  height: 100%;\n  font-size: 18px;\n  line-height: 27px;\n  resize: none;\n  padding: 0;\n  border: none;\n  color: rgb(52, 58, 64);\n  &:focus {\n    outline: none;\n  }\n`;\nconst ButtonsWrapper = styled.div`\n  box-shadow: rgba(0, 0, 0, 0.04) 0px -4px 16px 0px;\n  margin: 0 -30px -30px -30px;\n  padding: 10px;\n  display: flex;\n  align-content: center;\n  justify-content: space-between;\n`;\n\nconst ExitBtn = styled(Button)`\n  font-size: 1.125rem;\n  height: 2.5rem;\n  width: 7rem;\n  font-weight: 100;\n`;\n\nconst ConfirmBtn = styled(Button)`\n  font-size: 1.125rem;\n  height: 2.5rem;\n  width: 10rem;\n  font-weight: bold;\n`;\n\nconst TitleContainer = styled.h1`\n  font-size: 2.5em;\n  margin-bottom: 5rem;\n`;\n\nconst MarkContainer = styled.div`\n  height: 100%;\n  width: 50%;\n  padding: 3rem;\n  overflow: scroll;\n  background-color: rgb(251, 253, 252);\n  @media (max-width: 1024px) {\n    display: none;\n  }\n`;\n\nconst FocusBar = styled.div`\n  width: 4rem;\n  height: 0.5rem;\n  background: rgb(52, 58, 64);\n  margin: 1rem 0rem;\n`;\n\nexport default WritePostPresenter;\n","import React, { useState, useRef, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport WritePostPresenter from \"./WritePostPresenter\";\nimport { QUERY_WRITE_POST, QUERY_EDIT_POST } from \"../../../models/post\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../../../store/modules\";\nimport {\n  posting_set,\n  posting_addContent,\n  posting_clear,\n} from \"../../../store/modules/posting\";\nimport { useHistory } from \"react-router-dom\";\nimport { uploadImage } from \"../../../shared/utils\";\nimport { useMutation } from \"@apollo/client\";\n\nconst WritePostContainer = () => {\n  const [hashtag, setHashtag] = useState<string>(\"\");\n  const id = useSelector((state: RootState) => state.posting.id);\n  const isEditing = useSelector((state: RootState) => state.posting.isEditing);\n  const title = useSelector((state: RootState) => state.posting.title);\n  const hashtags = useSelector((state: RootState) => state.posting.hashtags);\n  const content = useSelector((state: RootState) => state.posting.content);\n  const series_id = useSelector((state: RootState) => state.posting.series_id);\n  const thumbnail = useSelector((state: RootState) => state.posting.thumbnail);\n  const url = useSelector((state: RootState) => state.posting.url);\n  const myname = useSelector((state: RootState) => state.me.username);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const textareaEl = useRef<HTMLTextAreaElement>(null);\n\n  const handleChangeText = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { name, value } = e.target;\n      if (name === \"hashtag\") setHashtag(value);\n      if (name === \"title\" || name === \"content\")\n        dispatch(posting_set({ key: name, value }));\n    },\n    [dispatch]\n  );\n\n  const handleChangeHashtags = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key === \"Enter\" || e.key === \",\") {\n        e.preventDefault();\n        if (hashtags.find((text) => text === hashtag)) {\n          return toast.warning(\"이미 있는 해시태그입니다.\");\n        }\n        if (hashtag.trim() !== \"\") {\n          setHashtag(\"\");\n          dispatch(\n            posting_set({ key: \"hashtags\", value: [...hashtags, hashtag] })\n          );\n        } else {\n          toast.error(\"해시태그를 입력해주세요!\");\n        }\n      }\n    },\n    [hashtag, hashtags, dispatch]\n  );\n\n  const [postingMutation] = useMutation(QUERY_WRITE_POST, {\n    variables: {\n      title,\n      hashtags,\n      content,\n      series_id,\n      thumbnail,\n      url: title,\n    },\n  });\n\n  const [editMutation] = useMutation(QUERY_EDIT_POST, {\n    variables: {\n      id,\n      title,\n      hashtags,\n      content,\n      series_id,\n      thumbnail,\n      url,\n      action: \"EDIT\",\n    },\n  });\n\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      if (title === \"\" || content === \"\") {\n        toast.error(\"제목과 내용을 비우지 말아주세요!\");\n      } else {\n        try {\n          let newUrl: string;\n\n          if (!isEditing) {\n            const { data }: any = await postingMutation();\n            newUrl = data.posting.url;\n            if (!data.posting) {\n              toast.error(\"글 작성에 실패했습니다.\");\n            } else {\n              toast.success(\"글 작성에 성공했습니다.\");\n            }\n          } else {\n            const { data }: any = await editMutation();\n            newUrl = data.editPost.url;\n            if (!data.editPost) {\n              toast.error(\"게시글 수정에 실패했습니다.\");\n            } else {\n              toast.success(\"게시글 수정에 성공했습니다.\");\n              dispatch(posting_clear());\n            }\n          }\n          history.push(`/@${myname}/${newUrl}`);\n        } catch (e) {\n          console.log(e);\n          toast.error(\"요청을 완료할 수 없습니다. 다시 시도해주세요.\");\n        }\n      }\n    },\n    [\n      isEditing,\n      title,\n      content,\n      myname,\n      postingMutation,\n      editMutation,\n      dispatch,\n      history,\n    ]\n  );\n\n  const handleClickHashtag = useCallback(\n    (e: any) =>\n      dispatch(\n        posting_set({\n          key: \"hashtags\",\n          value: hashtags.filter((text) => text !== e.target.textContent),\n        })\n      ),\n    [hashtags, dispatch]\n  );\n\n  const handleUploadImage = useCallback(\n    async (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (!e.target.files || e.target.files.length === 0) return;\n      const file = e.target.files[0];\n      try {\n        const { data } = await uploadImage(file);\n        dispatch(posting_addContent(`\\n![](${data.location})`));\n      } catch (err) {\n        toast.error(\"파일 업로드에 실패하였습니다.\" + err);\n        return null;\n      }\n    },\n    [dispatch]\n  );\n\n  const hanldToolbarButton = useCallback(\n    (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n      const fixes: any = {\n        h1: [\"# \", \"\"],\n        h2: [\"## \", \"\"],\n        h3: [\"### \", \"\"],\n        h4: [\"#### \", \"\"],\n        quote: [\"> \", \"\"],\n        codeBlock: [\"```\\n\", \"\\n```\\n\"],\n        bold: [\"**\", \"**\"],\n        italic: [\"_\", \"_ \"],\n        del: [\"~~\", \"~~\"],\n        link: [\"[\", \"](link here)\"],\n      };\n      const name = e.currentTarget.name;\n      let start = textareaEl.current?.selectionStart || 0;\n      if ([\"h1\", \"h2\", \"h3\", \"h4\", \"quote\", \"codeBlock\"].includes(name)) {\n        const front =\n          textareaEl.current?.value.lastIndexOf(\"\\n\", start - 1) || 0;\n        start = front + 1;\n      }\n      const end = textareaEl.current?.selectionEnd || 0;\n      const content = textareaEl.current?.value.slice(start, end) || \"텍스트\";\n\n      let afterContet = \"\";\n      if (\n        content.startsWith(fixes[name][0]) &&\n        content.endsWith(fixes[name][1])\n      ) {\n        if (fixes[name][1] === \"\") {\n          afterContet += content.slice(fixes[name][0].length);\n        } else {\n          afterContet += content.slice(\n            fixes[name][0].length,\n            -fixes[name][1].length\n          );\n        }\n      } else {\n        afterContet += fixes[name][0] + content + fixes[name][1];\n      }\n      textareaEl.current?.focus();\n      textareaEl.current?.setRangeText(afterContet, start, end, \"select\");\n      dispatch(\n        posting_set({ key: \"content\", value: textareaEl.current?.value })\n      );\n    },\n    [dispatch]\n  );\n\n  const hanldExit = () => {\n    if (isEditing) {\n      dispatch(posting_clear());\n    }\n    history.goBack();\n  };\n\n  return (\n    <WritePostPresenter\n      title={title}\n      hashtag={hashtag}\n      hashtags={hashtags}\n      content={content}\n      handleChangeText={handleChangeText}\n      handleChangeHashtags={handleChangeHashtags}\n      handleSubmit={handleSubmit}\n      handleClickHashtag={handleClickHashtag}\n      hanldExit={hanldExit}\n      onUpload={handleUploadImage}\n      textareaEl={textareaEl}\n      hanldToolbarButton={hanldToolbarButton}\n      isEditing={isEditing}\n    />\n  );\n};\n\nexport default WritePostContainer;\n","import WritePostContainer from \"./WritePostContainer\";\n\nexport default WritePostContainer;\n"],"sourceRoot":""}