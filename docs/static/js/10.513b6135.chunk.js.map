{"version":3,"sources":["components/Hashtag.tsx","components/Markdown.tsx","pages/WritePost/WritePostQueries.tsx","components/Uploader.tsx","pages/WritePost/WritePostPresenter.tsx","pages/WritePost/WritePostContainer.tsx","pages/WritePost/index.tsx"],"names":["HashtagContainer","styled","Link","React","memo","name","isLink","onClick","to","e","preventDefault","InlineCodeBlock","props","style","background","value","BlockQuoteBlock","backgroundColor","padding","margin","borderLeft","children","CodeBlock","color","Conatiner","div","source","replace","renderers","code","blockquote","skipHtml","escapeHtml","QUERY_WRITE_POST","gql","DropBox","Container","FileUploader","Uploader","onUpload","useDropzone","accept","onDrop","acceptedFiles","forEach","file","getRootProps","getInputProps","isDragActive","Wrapper","TitleEditor","input","HashtagEditor","HashtagBox","ContentEditor","textarea","ButtonsWrapper","ConfirmBtn","Button","ExitBtnContainer","ExitBtnText","FileContainer","MarkContainer","FocusBar","WritePostPresenter","form","title","hashtag","hashtags","content","handleChangeText","handleChangeHashtags","handleSubmit","handleClickHashtag","textareaEl","showTagInfo","useCallback","toast","dark","position","hideProgressBar","autoClose","toastId","dismissInfo","dismiss","Hashtags","useMemo","map","text","Hashtag","key","onChange","onKeyPress","onFocus","onBlur","placeholder","tabIndex","IndependentComp","ExitButton","Icon","type","size","Helmet","length","ref","Markdown","WritePostContainer","useState","series_id","thumbnail","url","files","setTitle","setHashtag","setHashtags","setContent","useRef","target","find","warning","trim","error","useMutation","variables","postingMutation","a","posting","data","success","window","location","href","user","username","console","log","filter","textContent","formData","FormData","append","originalname","axios","post","serverUri","headers","concat"],"mappings":"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","file":"static/js/10.513b6135.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\ninterface HashtagPrpps {\n  name: string;\n  isLink?: boolean;\n  onClick?:\n    | ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void)\n    | undefined;\n}\nconst Hashtag: React.FC<HashtagPrpps> = ({ name, isLink = true, onClick }) => {\n  if (isLink) {\n    return <HashtagContainer to={`/tags/${name}`}>{name}</HashtagContainer>;\n  }\n  return (\n    <HashtagContainer\n      to={`/tags/${name}`}\n      onClick={(e) => {\n        e.preventDefault();\n        if (onClick) {\n          onClick(e);\n        }\n      }}\n    >\n      {name}\n    </HashtagContainer>\n  );\n};\n\nconst HashtagContainer = styled(Link)`\n  @media (max-width: 768px) {\n    height: 1.5rem;\n    font-size: 0.75rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    margin-right: 0.5rem;\n    margin-bottom: 0.5rem;\n    border-radius: 0.75rem;\n  }\n  display: inline-flex;\n  align-items: center;\n  height: 2rem;\n  padding: 0px 1rem;\n  margin-bottom: 0.875rem;\n  background-color: rgb(241, 243, 245);\n\n  color: rgb(12, 166, 120);\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 1rem;\n  border-radius: 1rem;\n\n  & + & {\n    margin-left: 10px;\n  }\n\n  transition: background-color 0.08s ease-out 0s;\n  &:hover {\n    background-color: rgb(249, 249, 250);\n  }\n`;\n\nexport default React.memo(Hashtag);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ReactMarkdown from \"react-markdown\";\n\ninterface MarkdownProps {\n  source: string;\n}\n\nconst Markdown: React.FC<MarkdownProps> = ({ source }) => {\n  return (\n    <Conatiner>\n      <ReactMarkdown\n        source={source.replace(/\\n/g, \"  \\n\")}\n        renderers={{\n          code: CodeBlock,\n          InlineCodeBlock: InlineCodeBlock,\n          blockquote: BlockQuoteBlock,\n        }}\n        skipHtml={false}\n        escapeHtml={false}\n      />\n    </Conatiner>\n  );\n};\n\nconst InlineCodeBlock = (props: any) => {\n  return <span style={{ background: \"#ff0\" }}>{props.value}</span>;\n};\n\nconst BlockQuoteBlock = (props: any) => {\n  return (\n    <div\n      style={{\n        backgroundColor: \"rgb(248,249,250)\",\n        padding: \"1rem 1rem 1rem 2rem\",\n        margin: 5,\n        borderLeft: \"4px solid rgb(32, 201, 151)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nconst CodeBlock = (props: any) => {\n  return (\n    <pre style={{ background: \"rgb(248,249,250)\", color: \"#000\", padding: 10 }}>\n      <code>{props.value}</code>\n    </pre>\n  );\n};\n\nconst Conatiner = styled.div``;\n\nexport default React.memo(Markdown);\n","import { gql } from \"apollo-boost\";\n\n\nexport const QUERY_WRITE_POST = gql`\n  mutation posting(\n    $title: String!,\n    $hashtags: [String!],\n    $content: String!,\n    $series_id: String,\n    $thumbnail: String,\n    $url: String!,\n    $files: [String!]\n  ) {\n    posting(\n    title: $title,\n    hashtags: $hashtags,\n    content: $content,\n    series_id: $series_id,\n    thumbnail: $thumbnail,\n    url: $url,\n    files: $files\n  ) {\n    url\n    user {\n      username\n    }\n  }\n}\n`;","import React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport styled from \"styled-components\";\n\ninterface UploaderInterface {\n  onUpload: (file: any) => void;\n}\n\nconst Uploader = ({ onUpload }: UploaderInterface) => {\n  const onDrop = (acceptedFiles: File[]) => {\n    acceptedFiles.forEach((file) => {\n      //const reader = new FileReader();\n      // reader.onabort = () => console.log(\"aborted\");\n      // reader.onerror = () => console.log(\"failed\");\n      // reader.onload = () => {\n      //   const binaryStr = reader.result;\n      //   console.log(binaryStr);\n      // };\n      // reader.readAsArrayBuffer(file);\n      onUpload(file);\n    });\n  };\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    accept: \"image/*\",\n    onDrop,\n  });\n\n  return (\n    <Container {...getRootProps()}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <DropBox>드래그해서 사진을 올리세요! </DropBox>\n      ) : (\n        <FileUploader>사진을 여기에 놔주세요 </FileUploader>\n      )}\n    </Container>\n  );\n};\nconst DropBox = styled.div``;\n\nconst Container = styled.div`\n  border: 1px solid black;\n`;\n\nconst FileUploader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default Uploader;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { Helmet } from \"react-helmet\";\nimport { formProps } from \"./WritePostContainer\";\nimport Hashtag from \"../../components/Hashtag\";\nimport Button from \"../../components/Button\";\nimport { Link } from \"react-router-dom\";\nimport Markdown from \"../../components/Markdown\";\nimport { Icon } from \"../../components/Icon\";\nimport Uploader from \"../../components/Uploader\";\nimport { toast } from \"react-toastify\";\n\ninterface WritePostPresenterProps {\n  form: formProps;\n  title: string;\n  hashtag: string;\n  hashtags: Array<string>;\n  content: string;\n  handleChangeText: any;\n  handleChangeHashtags: (\n    e: React.KeyboardEvent<Element>\n  ) => string | number | undefined;\n  handleSubmit: (e: React.FormEvent<Element>) => Promise<void>;\n  handleClickHashtag: (e: any) => void;\n  onUpload: any;\n  textareaEl: React.MutableRefObject<null>;\n}\n\nconst WritePostPresenter: FC<WritePostPresenterProps> = ({\n  form,\n  title,\n  hashtag,\n  hashtags,\n  content,\n  handleChangeText,\n  handleChangeHashtags,\n  handleSubmit,\n  handleClickHashtag,\n  onUpload,\n  textareaEl,\n}) => {\n  const showTagInfo = React.useCallback(\n    () =>\n      toast.dark(\n        \"태그를 입력한 뒤 엔터를 누르시면 등록할 수 있습니다.\\n등록된 태그는 클릭하면 삭제됩니다.\",\n        {\n          position: \"top-center\",\n          hideProgressBar: true,\n          autoClose: false,\n          toastId: \"tagInfo\",\n        }\n      ),\n    []\n  );\n  const dismissInfo = React.useCallback(() => toast.dismiss(\"tagInfo\"), []);\n\n  const Hashtags = React.useMemo(\n    () => (\n      <HashtagBox>\n        {hashtags.map((text) => (\n          <Hashtag\n            key={text}\n            name={text}\n            isLink={false}\n            onClick={handleClickHashtag}\n          />\n        ))}\n        <HashtagEditor\n          value={hashtag}\n          onChange={handleChangeText}\n          onKeyPress={handleChangeHashtags}\n          onFocus={showTagInfo}\n          onBlur={dismissInfo}\n          placeholder=\"태그를 입력해주세요\"\n          name=\"hashtag\"\n          tabIndex={1}\n        />\n      </HashtagBox>\n    ),\n    [hashtags, hashtag, handleClickHashtag]\n  );\n\n  const IndependentComp = React.useMemo(\n    () => ({\n      FocusBar: <FocusBar />,\n      ExitButton: (\n        <ExitBtnContainer to={\"/\"}>\n          <Icon type={\"back\"} size={16} />\n          <ExitBtnText>나가기 </ExitBtnText>\n        </ExitBtnContainer>\n      ),\n      FileUploader: (\n        <FileContainer>\n          <Uploader onUpload={onUpload} />\n        </FileContainer>\n      ),\n    }),\n    []\n  );\n\n  return (\n    <Container>\n      <Helmet>\n        {title.length > 0 ? (\n          <title>(작성중) {title}</title>\n        ) : (\n          <title>글 작성</title>\n        )}\n      </Helmet>\n      <Wrapper>\n        {React.useMemo(\n          () => (\n            <TitleEditor\n              value={title}\n              onChange={handleChangeText}\n              placeholder=\"제목을 입력해주세요\"\n              name=\"title\"\n              tabIndex={0}\n            />\n          ),\n          [title]\n        )}\n        {IndependentComp.FocusBar}\n        {Hashtags}\n\n        {IndependentComp.FileUploader}\n        {React.useMemo(\n          () => (\n            <ContentEditor\n              value={content}\n              onChange={handleChangeText}\n              ref={textareaEl}\n              placeholder=\"내용을 입력해주세요\"\n              name=\"content\"\n              tabIndex={2}\n            />\n          ),\n          [content]\n        )}\n        <ButtonsWrapper>\n          {IndependentComp.ExitButton}\n          {React.useMemo(\n            () => (\n              <ConfirmBtn text={\"출간하기\"} onClick={handleSubmit} />\n            ),\n            [handleSubmit]\n          )}\n        </ButtonsWrapper>\n      </Wrapper>\n      {React.useMemo(\n        () => (\n          <MarkContainer>\n            <h1>{title}</h1>\n            <Markdown source={`${content}`} />\n          </MarkContainer>\n        ),\n        [title, content]\n      )}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  height: calc(100% - 0px);\n  flex-wrap: no-wrap;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50%;\n  height: 100%;\n  padding: 2rem 3rem;\n\n  @media (max-width: 1024px) {\n    width: 100%;\n  }\n`;\n\nconst TitleEditor = styled.input`\n  width: 100%;\n  height: 70px;\n  font-size: 40px;\n  padding: 0;\n  border: none;\n  font-weight: 650;\n\n  &:focus {\n    outline: none;\n  }\n`;\nconst HashtagEditor = styled.input`\n  min-width: 12rem;\n  padding: 0;\n  margin-left: 1rem;\n  height: 40px;\n  font-size: 24px;\n  font-weight: 500;\n  padding: 0;\n  border: none;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst HashtagBox = styled.div`\n  margin: 10px 0;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst ContentEditor = styled.textarea`\n  width: 100%;\n  margin-top: 15px;\n  height: 100%;\n  font-size: 1.125rem;\n  resize: none;\n  padding: 0;\n  border: none;\n\n  &:focus {\n    outline: none;\n  }\n`;\nconst ButtonsWrapper = styled.div`\n  box-shadow: rgba(0, 0, 0, 0.04) 0px -4px 16px 0px;\n  margin: 0 -30px -30px -30px;\n  padding: 10px;\n  display: flex;\n  align-content: center;\n  justify-content: space-between;\n`;\n\nconst ConfirmBtn = styled(Button)`\n  font-size: 1.125rem;\n  height: 2.5rem;\n  width: 10rem;\n  font-weight: bold;\n`;\n\nconst ExitBtnContainer = styled(Link)`\n  width: 7rem;\n  height: 2.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.125rem;\n  border-radius: 4px;\n  background-color: inherit;\n\n  transition: background-color 0.05s;\n  &:hover {\n    background-color: rgb(240, 240, 240);\n  }\n`;\n\nconst ExitBtnText = styled.div`\n  margin-left: 0.8rem;\n`;\n\nconst FileContainer = styled.div`\n  height: 30px;\n`;\n\nconst MarkContainer = styled.div`\n  height: 100%;\n  width: 50%;\n  @media (max-width: 1024px) {\n    display: none;\n  }\n`;\n\nconst FocusBar = styled.div`\n  width: 4rem;\n  height: 0.5rem;\n  background: rgb(52, 58, 64);\n  margin: 1rem 0rem;\n`;\n\nexport default WritePostPresenter;\n","import React, { useState, useRef, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { QUERY_WRITE_POST } from \"./WritePostQueries\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { serverUri } from \"../../Apollo/Client\";\nimport axios from \"axios\";\nimport WritePostPresenter from \"./WritePostPresenter\";\n\nexport interface formProps {\n  series_id: string;\n  thumbnail: string;\n  url: string;\n  files: Array<string>;\n}\n\nconst WritePostContainer = () => {\n  const [form, setForm] = useState<formProps>({\n    series_id: \"\",\n    thumbnail: \"\",\n    url: \"\",\n    files: [],\n  });\n  const [title, setTitle] = useState<string>(\"\");\n  const [hashtag, setHashtag] = useState<string>(\"\");\n  const [hashtags, setHashtags] = useState<Array<string>>([]);\n  const [content, setContent] = useState<string>(\"\");\n\n  const textareaEl = useRef(null);\n\n  const handleChangeText = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.target.name === \"title\") setTitle(e.target.value);\n      if (e.target.name === \"hashtag\") setHashtag(e.target.value);\n      if (e.target.name === \"content\") setContent(e.target.value);\n    },\n    []\n  );\n  const handleChangeHashtags = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key === \"Enter\") {\n        if (hashtags.find((text) => text === hashtag)) {\n          return toast.warning(\"이미 있는 해시태그입니다.\");\n        }\n        if (hashtag.trim() !== \"\") {\n          setHashtag(\"\");\n          setHashtags([...hashtags, hashtag]);\n        } else {\n          toast.error(\"해시태그를 입력해주세요!\");\n        }\n      }\n    },\n    [hashtag, hashtags]\n  );\n\n  const [postingMutation] = useMutation(QUERY_WRITE_POST, {\n    variables: {\n      title: title,\n      hashtags: hashtags,\n      content: content,\n      series_id: form.series_id,\n      thumbnail: form.thumbnail,\n      url: title,\n      files: form.files,\n    },\n  });\n\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n      if (title === \"\" || content === \"\") {\n        toast.error(\"제목과 내용을 비우지 말아주세요!\");\n      } else {\n        try {\n          const {\n            data: { posting },\n          }: any = await postingMutation();\n\n          if (!posting) {\n            toast.error(\"글 작성에 실패했습니다.\");\n          } else {\n            toast.success(\"글 작성에 성공했습니다.\");\n            window.location.href = `/@${posting.user.username}/${posting.url}`;\n          }\n        } catch (e) {\n          console.log(e);\n          toast.error(\"요청을 완료할 수 없습니다. 다시 시도해주세요.\");\n        }\n      }\n    },\n    [title, content, postingMutation]\n  );\n\n  const handleClickHashtag = useCallback(\n    (e: any) =>\n      setHashtags(hashtags.filter((text) => text !== e.target.textContent)),\n    [hashtags]\n  );\n\n  const onUpload = useCallback(\n    async (file: any) => {\n      const formData = new FormData();\n      formData.append(\"file\", file, file.originalname);\n\n      try {\n        const { data } = await axios.post(serverUri + \"/api/upload\", formData, {\n          headers: {\n            \"content-type\": \"multipart/form-data\",\n          },\n        });\n        setContent(content.concat(`\\n![](${data.location})`));\n      } catch (err) {\n        toast.error(\"파일 업로드에 실패하였습니다.\" + err);\n        return null;\n      }\n    },\n    [content]\n  );\n\n  return (\n    <WritePostPresenter\n      form={form}\n      title={title}\n      hashtag={hashtag}\n      hashtags={hashtags}\n      content={content}\n      handleChangeText={handleChangeText}\n      handleChangeHashtags={handleChangeHashtags}\n      handleSubmit={handleSubmit}\n      handleClickHashtag={handleClickHashtag}\n      onUpload={onUpload}\n      textareaEl={textareaEl}\n    />\n  );\n};\n\nexport default WritePostContainer;\n\n// # state를 객체로 묶어서 저장했을 때의 문제점\n// 1. 의존성 주입을 할 때 가장 큰 객체를 넘겨줘야하기 때문에 memorization 성능이 급격히 떨어진다. (내용 100개의 항목 중 한개의 항목만 바뀌어도 전체 state를 갱신해줘야하기 때문에)\n/*\nexport interface formProps {\n  title: string;\n  hashtag: string;\n  hashtags: Array<string>;\n  content: string;\n  series_id: string;\n  thumbnail: string;\n  url: string;\n  files: Array<string>;\n}\n\nconst WritePostContainer = () => {\n  const [form, setForm] = useState<formProps>({\n    title: \"\",\n    hashtag: \"\",\n    hashtags: [],\n    content: \"\",\n    series_id: \"\",\n    thumbnail: \"\",\n    url: \"\",\n    files: [],\n  });\n\n  const textareaEl = useRef(null);\n\n  const handleChangeText = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setForm({ ...form, [e.target.name]: e.target.value });\n    },\n    [form]\n  );\n  const handleChangeHashtags = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key === \"Enter\") {\n        if (form.hashtags.find((text) => text === form.hashtag)) {\n          return toast.warning(\"이미 있는 해시태그입니다.\");\n        }\n        if (form.hashtag.trim() !== \"\") {\n          setForm({\n            ...form,\n            hashtags: [...form.hashtags.concat(form.hashtag)],\n            hashtag: \"\",\n          });\n        } else {\n          toast.error(\"해시태그를 입력해주세요!\");\n        }\n      }\n    },\n    [form]\n  );\n\n  const [postingMutation] = useMutation(QUERY_WRITE_POST, {\n    variables: {\n      title: form.title,\n      hashtags: form.hashtags,\n      content: form.content,\n      series_id: form.series_id,\n      thumbnail: form.thumbnail,\n      url: form.title,\n      files: form.files,\n    },\n  });\n\n  const handleSubmit = useCallback(\n    async (e: React.FormEvent) => {\n      e.preventDefault();\n\n      if (form.title === \"\" || form.content === \"\") {\n        toast.error(\"제목과 내용을 비우지 말아주세요!\");\n      } else {\n        try {\n          const {\n            data: { posting },\n          }: any = await postingMutation();\n\n          if (!posting) {\n            toast.error(\"글 작성에 실패했습니다.\");\n          } else {\n            toast.success(\"글 작성에 성공했습니다.\");\n            window.location.href = `/@${posting.user.username}/${posting.url}`;\n          }\n        } catch (e) {\n          console.log(e);\n          toast.error(\"요청을 완료할 수 없습니다. 다시 시도해주세요.\");\n        }\n      }\n    },\n    [form, postingMutation]\n  );\n\n  const handleClickHashtag = useCallback(\n    (e: any) => {\n      setForm({\n        ...form,\n        hashtags: form.hashtags.filter((text) => text !== e.target.textContent),\n      });\n    },\n    [form]\n  );\n\n  const onUpload = useCallback(\n    async (file: any) => {\n      const formData = new FormData();\n      formData.append(\"file\", file, file.originalname);\n\n      try {\n        const { data } = await axios.post(serverUri + \"/api/upload\", formData, {\n          headers: {\n            \"content-type\": \"multipart/form-data\",\n          },\n        });\n\n        setForm({\n          ...form,\n          content: form.content.concat(`\\n![](${data.location})`),\n        });\n      } catch (err) {\n        toast.error(\"파일 업로드에 실패하였습니다.\" + err);\n        return null;\n      }\n    },\n    [form]\n  );\n\n  return (\n    <WritePostPresenter\n      form={form}\n      handleChangeText={handleChangeText}\n      handleChangeHashtags={handleChangeHashtags}\n      handleSubmit={handleSubmit}\n      handleClickHashtag={handleClickHashtag}\n      onUpload={onUpload}\n      textareaEl={textareaEl}\n    />\n  );\n};\n*/\n","import WritePostContainer from \"./WritePostContainer\";\n\nexport default WritePostContainer;\n"],"sourceRoot":""}