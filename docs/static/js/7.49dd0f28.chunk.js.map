{"version":3,"sources":["components/Hashtag.tsx","components/ImageLoader.tsx","shared/utils.tsx","containers/SearchPostList/SearchPostListQueries.tsx","components/SearchPostCard.tsx","containers/SearchPostList/SearchPostList.tsx","pages/Search.tsx"],"names":["HashtagContainer","styled","Link","React","memo","name","isLink","onClick","to","e","preventDefault","Image","img","props","_loading","ImageLoader","loadingHeight","useState","loading","setLoading","error","setError","height","onLoad","onError","convertMarkdownToText","str","marked","replace","match","dec","String","fromCharCode","QUERY_SEARCH_POST","gql","QUERY_SEARCH_HASHTAG","PostLoadingSkeleton","Wrapper","style","fontSize","lineHeight","Header","circle","width","UserColumn","article","div","ImageWrapper","src","ETitleText","FatText","prop","theme","deepDarkGreyColor","ContentText","p","greyColor","InfoText","span","SearchPostCard","user","username","avatar","url","thumbnail","files","title","content","description","hashtags","createdAt","commentCount","thumbnail_url","length","descriptionText","errorThumbnailLoading","setErrorThumbnailLoading","Avatar","size","text","slice","concat","map","hashtag","Hashtag","key","id","main","EText","SearchContainer","section","SearchInputContainer","SearchInput","Input","darkGreyColor","ETagnameText","h2","SearchPostList","searchType","posts","term","onTermChange","tagname","value","onChange","placeholder","color","Theme","post","Container","Search","history","useHistory","searchTerm","useLocation","search","split","setTerm","useQuery","variables","skip","data","useEffect","window","location","reload","toast","searchPost","target"],"mappings":"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","file":"static/js/7.49dd0f28.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\ninterface HashtagPrpps {\n  name: string;\n  isLink?: boolean;\n  onClick?:\n    | ((event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void)\n    | undefined;\n}\nconst Hashtag: React.FC<HashtagPrpps> = ({ name, isLink = true, onClick }) => {\n  if (isLink) {\n    return <HashtagContainer to={`/tags/${name}`}>{name}</HashtagContainer>;\n  }\n  return (\n    <HashtagContainer\n      to={`/tags/${name}`}\n      onClick={(e) => {\n        e.preventDefault();\n        if (onClick) {\n          onClick(e);\n        }\n      }}\n    >\n      {name}\n    </HashtagContainer>\n  );\n};\n\nconst HashtagContainer = styled(Link)`\n  @media (max-width: 768px) {\n    height: 1.5rem;\n    font-size: 0.75rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    margin-right: 0.5rem;\n    margin-bottom: 0.5rem;\n    border-radius: 0.75rem;\n  }\n  display: inline-flex;\n  align-items: center;\n  height: 2rem;\n  padding: 0px 1rem;\n  margin-bottom: 0.875rem;\n  background-color: rgb(241, 243, 245);\n\n  color: rgb(12, 166, 120);\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 1rem;\n  border-radius: 1rem;\n\n  & + & {\n    margin-left: 10px;\n  }\n\n  transition: background-color 0.08s ease-out 0s;\n  &:hover {\n    background-color: rgb(249, 249, 250);\n  }\n`;\n\nexport default React.memo(Hashtag);\n","import React, { ImgHTMLAttributes, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Skeleton from \"react-loading-skeleton\";\n\ninterface ImageLoaderProps extends ImgHTMLAttributes<HTMLImageElement> {\n  loadingHeight?: string | number | undefined;\n}\n\nconst ImageLoader: React.FC<ImageLoaderProps> = ({\n  loadingHeight,\n  ...props\n}) => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<boolean>(false);\n  const onLoad = () => setLoading(false);\n  const onError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n    setError(true);\n    if (props.onError) {\n      props.onError(e);\n    }\n  };\n\n  return (\n    <>\n      {loading && !error && <Skeleton height={loadingHeight} />}\n      {!error && (\n        <Image\n          _loading={loading}\n          onLoad={onLoad}\n          onError={onError}\n          {...props}\n        />\n      )}\n    </>\n  );\n};\n\ninterface ImageProps {\n  _loading: boolean;\n}\n\nconst Image = styled.img<ImageProps>`\n  display: ${(props) => (props._loading ? \"none\" : \"inline\")};\n`;\n\nexport default ImageLoader;\n","import marked from \"marked\";\n\nexport const convertMarkdownToText = (str: string) => {\n  return marked(str)\n    .replace(/<[^>]+>/g, \"\")\n    .replace(/&#(\\d+);/g, function (match, dec) {\n      return String.fromCharCode(dec);\n    });\n};\n","import { gql } from \"apollo-boost\";\nimport { SearchPostProps } from \"../../interface/post\";\n\nexport interface searchPostData {\n  searchPost: SearchPostProps[];\n}\n\nexport interface searchPostVars {\n  term: string;\n}\n\nexport interface searchHashtag {\n  id: string;\n  explanation: string;\n  posts: [SearchPostProps];\n}\n\nexport interface searchHashtagData {\n  searchHashtag: searchHashtag;\n}\n\nexport interface searchHashtagVars {\n  name: string;\n}\n\nexport const QUERY_SEARCH_POST = gql`\n  query searchPost($term: String!) {\n    searchPost(term: $term) {\n      id\n      user {\n        id\n        username\n        avatar\n      }\n      thumbnail\n      description\n      files {\n        id\n        url\n      }\n      url\n      title\n      content\n      hashtags {\n        id\n        name\n      }\n      createdAt\n      commentCount\n    }\n  }\n`;\n\nexport const QUERY_SEARCH_HASHTAG = gql`\n  query searchHashtag($name: String!) {\n    searchHashtag(name: $name) {\n      id\n      explanation\n      posts {\n        id\n        user {\n          id\n          username\n          avatar\n        }\n        thumbnail\n        description\n        files {\n          id\n          url\n        }\n        url\n        title\n        content\n        hashtags {\n          id\n          name\n        }\n        createdAt\n        commentCount\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport Avatar from \"./Avatar\";\nimport FatText from \"./FatText\";\nimport Hashtag from \"./Hashtag\";\nimport Skeleton from \"react-loading-skeleton\";\nimport ImageLoader from \"./ImageLoader\";\nimport { SearchPostProps } from \"../interface/post\";\nimport { convertMarkdownToText } from \"../shared/utils\";\n\nconst SearchPostCard: React.FC<SearchPostProps> = ({\n  user: { username, avatar },\n  url,\n  thumbnail,\n  files,\n  title,\n  content,\n  description,\n  hashtags,\n  createdAt,\n  commentCount,\n}) => {\n  const thumbnail_url = thumbnail\n    ? thumbnail\n    : files.length > 0\n    ? files[0].url\n    : null;\n  const descriptionText = description\n    ? description\n    : convertMarkdownToText(content);\n  const [errorThumbnailLoading, setErrorThumbnailLoading] = useState(false);\n  return (\n    <Wrapper>\n      <Header>\n        <Link to={`/@${username}`}>\n          <Avatar size=\"md\" url={avatar} />\n        </Link>\n        <UserColumn>\n          <Link to={`/@${username}`}>\n            <FatText text={username} />\n          </Link>\n        </UserColumn>\n      </Header>\n      {thumbnail_url && !errorThumbnailLoading && (\n        <ImageWrapper>\n          <Link to={`/@${username}/${url}`}>\n            <Image\n              src={thumbnail_url}\n              loadingHeight={370}\n              onError={() => setErrorThumbnailLoading(true)}\n            />\n          </Link>\n        </ImageWrapper>\n      )}\n      <Link to={`/@${username}/${url}`}>\n        <ETitleText text={title} />\n      </Link>\n      <ContentText>\n        {descriptionText.length < 150\n          ? descriptionText\n          : descriptionText.slice(0, 150).concat(\"...\")}\n      </ContentText>\n      <HashtagContainer>\n        {hashtags.map((hashtag) => (\n          <Hashtag key={hashtag.id} name={hashtag.name} />\n        ))}\n      </HashtagContainer>\n      <InfoText>\n        {createdAt} {\" · \"} {commentCount}의 댓글\n      </InfoText>\n    </Wrapper>\n  );\n};\n\nexport const PostLoadingSkeleton = () => (\n  <Wrapper>\n    <div style={{ fontSize: 20, lineHeight: 2 }}>\n      <Header>\n        <Skeleton circle={true} height={50} width={50} />\n        <UserColumn>\n          <Skeleton width={300} height={40} />\n        </UserColumn>\n      </Header>\n      <Skeleton height={370} />\n      <Skeleton height={50} />\n    </div>\n  </Wrapper>\n);\n\nconst Wrapper = styled.article`\n  width: 100%;\n  line-height: 1.5;\n  padding-bottom: 4rem;\n`;\n\nconst Header = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n`;\n\nconst UserColumn = styled.div`\n  margin-left: 10px;\n`;\n\nconst ImageWrapper = styled.div`\n  position: relative;\n  height: 370px;\n  width: 100%;\n  overflow: hidden;\n  margin-bottom: 12px;\n`;\n\nconst Image = styled(ImageLoader)`\n  max-width: 100%;\n  width: 100%;\n  height: 370px;\n  position: absolute;\n  top: 0;\n  background-image: url(${(props) => props.src});\n  background-size: cover;\n  background-position: center;\n  object-fit: cover;\n`;\n\nconst ETitleText = styled(FatText)`\n  @media (max-width: 768px) {\n    font-size: 1rem;\n  }\n  font-size: 1.5rem;\n  word-break: keep-all;\n  color: ${(prop) => prop.theme.deepDarkGreyColor};\n  text-decoration: none;\n`;\n\nconst ContentText = styled.p`\n  @media (max-width: 768px) {\n    font-size: 0.875rem;\n    margin-bottom: 1.5rem;\n  }\n  width: 100%;\n  max-height: 75px;\n  font-size: 1rem;\n  color: ${(prop) => prop.theme.greyColor};\n  word-break: keep-all;\n  overflow-wrap: break-word;\n  margin-top: 0.5rem;\n  margin-bottom: 2rem;\n`;\n\nconst HashtagContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 10px;\n`;\n\nconst InfoText = styled.span`\n  font-weight: 400;\n  font-size: 14px;\n  text-transform: uppercase;\n  opacity: 0.5;\n  display: block;\n  margin: 10px 0px;\n`;\n\nexport default SearchPostCard;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport Input from \"../../components/Input\";\nimport SearchPostCard, {\n  PostLoadingSkeleton,\n} from \"../../components/SearchPostCard\";\nimport { SearchPostProps } from \"../../interface/post\";\nimport Theme from \"../../styles/theme\";\n// import { VariableSizeList as WList } from \"react-window\";\n\ninterface SearchPostListProps {\n  searchType: \"Search\" | \"Hashtag\";\n  posts?: SearchPostProps[] | null;\n  loading: boolean;\n  tagname?: string;\n  term?: string;\n  onTermChange?:\n    | ((event: React.ChangeEvent<HTMLInputElement>) => void)\n    | undefined;\n}\n\nconst SearchPostList: FC<SearchPostListProps> = ({\n  searchType,\n  posts,\n  loading,\n  term,\n  onTermChange,\n  tagname,\n}) => {\n  // const getItemHeight = (index: number) =>\n  //   posts && (posts[index].thumbnail || posts[index].files.length > 0)\n  //     ? 753\n  //     : 323;\n  return (\n    <Wrapper>\n      <SearchContainer>\n        <header>\n          {searchType === \"Hashtag\" && (\n            <ETagnameText>{`# ${tagname}`}</ETagnameText>\n          )}\n          {searchType === \"Search\" && (\n            <SearchInputContainer>\n              <SearchInput\n                value={term}\n                onChange={onTermChange}\n                placeholder={\"검색어를 입력하세요.\"}\n              />\n            </SearchInputContainer>\n          )}\n\n          {!loading &&\n            posts &&\n            (posts.length === 0 ? (\n              <EText>검색 결과가 없습니다.</EText>\n            ) : (\n              <EText>\n                총{\" \"}\n                <b style={{ color: Theme.deepDarkGreyColor }}>\n                  {posts.length}개\n                </b>\n                의 포스트를 찾았습니다.\n              </EText>\n            ))}\n        </header>\n        {loading && (searchType !== \"Search\" || (term && term.length > 0)) && (\n          <>\n            <PostLoadingSkeleton />\n            <PostLoadingSkeleton />\n          </>\n        )}\n\n        {posts &&\n          posts.map((post) => <SearchPostCard key={post.id} {...post} />)}\n        {/* {posts && (\n          <WList\n            height={800}\n            itemCount={posts.length}\n            itemSize={getItemHeight}\n            width={\"100%\"}\n          >\n            {({ index, style }) => {\n              const post = posts[index];\n              return <SearchPostCard key={post.id} {...post} />;\n            }}\n          </WList>\n        )} */}\n      </SearchContainer>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 780px;\n  margin: auto;\n  min-height: 50vh;\n`;\n\nconst EText = styled.span`\n  display: block;\n  font-weight: 400;\n  width: 100%;\n  color: ${(prop) => prop.theme.greyColor};\n  line-height: 1.5;\n  font-size: 1.125rem;\n  margin-bottom: 4rem;\n`;\n\nconst SearchContainer = styled.section`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  min-height: 50vh;\n`;\n\nconst SearchInputContainer = styled.div`\n  margin-bottom: 1.5rem;\n`;\nconst SearchInput = styled(Input)`\n  @media (max-width: 768px) {\n    height: 2.25rem;\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n  display: block;\n  border-radius: 1px;\n  border-color: ${(props) => props.theme.darkGreyColor};\n  background: white;\n  font-size: 25px;\n  height: 4rem;\n  width: 100%;\n  padding: 0px 1.5rem;\n\n  transition: border-color 0.08s ease-out 0s;\n  &:focus {\n    border-color: ${(prop) => prop.theme.deepDarkGreyColor};\n  }\n`;\n\nconst ETagnameText = styled.h2`\n  font-weight: 700;\n  font-size: 3rem;\n  line-height: 1.5;\n  margin-bottom: 20px;\n`;\n\nexport default SearchPostList;\n","import React, { useState, useEffect } from \"react\";\nimport SearchPostList from \"../containers/SearchPostList/SearchPostList\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport {\n  searchPostData,\n  searchPostVars,\n  QUERY_SEARCH_POST,\n} from \"../containers/SearchPostList/SearchPostListQueries\";\nimport { Helmet } from \"react-helmet\";\nimport styled from \"styled-components\";\nimport { toast } from \"react-toastify\";\n\nconst Search = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchTerm: string = location.search.split(\"=\")[1];\n  const [term, setTerm] = useState<string>(searchTerm ? searchTerm : \"\");\n\n  const { data, loading, error } = useQuery<searchPostData, searchPostVars>(\n    QUERY_SEARCH_POST,\n    {\n      variables: { term },\n      skip: term.length === 0,\n    }\n  );\n\n  const onTermChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    history.replace(\"/search?q=\" + e.target.value);\n    setTerm(e.target.value);\n  };\n\n  useEffect(() => {\n    if (error) {\n      window.location.reload();\n      toast.error(\"포스트를 가져오던 중 문제가 발생했습니다.\");\n    }\n  }, [error]);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {term.length > 0 ? `\"${term}\" 검색 결과 - Agent Blog` : \"Agent Blog\"}\n        </title>\n      </Helmet>\n      <SearchPostList\n        searchType={\"Search\"}\n        posts={data?.searchPost}\n        term={term}\n        onTermChange={onTermChange}\n        loading={loading}\n      />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  @media (max-width: 1024px) {\n    padding-left: 1rem;\n    padding-right: 1rem;\n    margin-top: 2rem;\n  }\n  @media (max-width: 768px) {\n    margin-top: 0.5rem;\n    width: 100%;\n  }\n\n  margin-top: 3.5rem;\n  width: 768px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport default Search;\n"],"sourceRoot":""}